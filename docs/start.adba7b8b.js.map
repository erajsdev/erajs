{"version":3,"sources":["util/event.ts","io.ts","../node_modules/lz-string/libs/lz-string.js","savedata.ts","util/index.ts","charadef/index.ts","characterstatus/view.ts","util/moduleInitializer.ts","util/tuple.ts","characterstatus/exp.ts","characterstatus/gauge.ts","characterstatus/level.ts","characterstatus/stain.ts","characterstatus/trait.ts","characterstatus/index.ts","util/clamp.ts","train/constants.ts","train/train.ts","train/trainlist/train_会話.ts","train/trainlist/train_スキンシップ.ts","train/trainlist/train_愛撫.ts","train/traintraitcalc.ts","train/trainlist/train_クンニ.ts","train/trainlist/train_指挿れ.ts","train/trainlist/train_胸揉み.ts","train/trainlist/train_正常位.ts","train/trainlist/train_手淫.ts","train/trainlist/train_フェラチオ.ts","train/trainlist/index.ts","train/trainloader.ts","train/trainmode.ts","train/levelupmode.ts","train/index.ts","charadef/charalist/chara0.ts","charadef/charalist/chara1.ts","charadef/charalist/index.ts","charadef/charaloader.ts","character.ts","variables.ts","game.ts","project.ts","mainscene.ts","start.ts"],"names":[],"mappings":"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","file":"start.adba7b8b.js","sourceRoot":"..\\src","sourcesContent":["\r\nexport class Event<T=void> {\r\n    private fs: ((p: T) => void)[] = []\r\n\r\n    addListener(f: (p: T) => void): () => void {\r\n        this.fs.push(f)\r\n        let disposed = false\r\n        return () => {\r\n            if (disposed) return\r\n            disposed = true\r\n            let remIdx = -1\r\n            for (let i = 0; i < this.fs.length; i++) {\r\n                if (this.fs[i] === f) {\r\n                    remIdx = i\r\n                    break\r\n                }\r\n            }\r\n            if (remIdx !== -1) {\r\n                this.fs.splice(remIdx, 1)\r\n            }\r\n        }\r\n    }\r\n\r\n    invoke(p: T) {\r\n        for (var f of this.fs) {\r\n            f(p)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class AsyncEvent<T=void> {\r\n    private fs: ((p: T) => void)[] = []\r\n\r\n    addListener(f: (p: T) => Promise<void>): () => void {\r\n        this.fs.push(f)\r\n        let disposed = false\r\n        return () => {\r\n            if (disposed) return\r\n            disposed = true\r\n            let remIdx = -1\r\n            for (let i = 0; i < this.fs.length; i++) {\r\n                if (this.fs[i] === f) {\r\n                    remIdx = i\r\n                    break\r\n                }\r\n            }\r\n            if (remIdx !== -1) {\r\n                this.fs.splice(remIdx, 1)\r\n            }\r\n        }\r\n    }\r\n\r\n    async invoke(p: T) {\r\n        for (var f of this.fs.slice()) {\r\n            await f(p)\r\n        }\r\n    }\r\n}\r\n","/**\r\n * コンソール画面の真似を行う\r\n * 結局のところDOMなので拡張は結構自由がきく\r\n * とりあえず最初にEmueraの表示機能再現だけやった\r\n */\r\nimport { Event, AsyncEvent } from './util/event'\r\n\r\n/**\r\n * 画面表示と入力\r\n */\r\nclass IO {\r\n    private mainBox: HTMLElement | undefined\r\n    private texts: HTMLElement | undefined\r\n    private lastElement: HTMLElement | undefined\r\n    private textInput: HTMLInputElement | undefined\r\n    private currentLine: HTMLDivElement | undefined\r\n    private currentAlign: 'left' | 'center' | 'right' = 'left'\r\n    private initialized = false\r\n    private currentPrintMode: \"normal\" | \"cells\" = \"normal\"\r\n\r\n    readonly inputStringEvent = new Event<string>()\r\n    readonly clickEvent = new Event<void>()\r\n    readonly newerButtonStarters: (() => void)[] = []\r\n    readonly olderButtonDisposers: (() => void)[] = []\r\n\r\n    initialize() {\r\n        if (this.initialized)\r\n            return;\r\n        this.initialized = true\r\n\r\n        console.log(\"io init\")\r\n        this.mainBox = document.createElement('div')\r\n        this.mainBox.classList.add(\"mainbox\")\r\n        document.body.appendChild(this.mainBox)\r\n\r\n        this.texts = document.createElement('div')\r\n        this.texts.classList.add(\"texts\")\r\n        this.mainBox.appendChild(this.texts)\r\n\r\n        this.currentLine = document.createElement('div')\r\n        this.currentLine.classList.add(\"line\")\r\n        this.texts.appendChild(this.currentLine)\r\n\r\n        this.lastElement = document.createElement('div')\r\n        this.lastElement.classList.add(\"lastelement\")\r\n        this.mainBox.appendChild(this.lastElement)\r\n\r\n        this.textInput = document.createElement('input')\r\n        this.textInput.classList.add(\"textinput\")\r\n        document.body.appendChild(this.textInput)\r\n\r\n        window.addEventListener(\"mousedown\", (ev) => {\r\n            ev.stopPropagation()\r\n            //ev.preventDefault()\r\n            this.clickEvent.invoke()\r\n        })\r\n        // 右クリックスキップするには邪魔\r\n        window.addEventListener(\"contextmenu\", (ev) => {\r\n            ev.stopPropagation()\r\n            ev.preventDefault()\r\n        })\r\n        window.addEventListener(\"dblclick\", (ev) => {\r\n            if (window.getSelection)\r\n                window.getSelection().removeAllRanges();\r\n            ev.stopPropagation()\r\n            ev.preventDefault()\r\n        })\r\n        /*\r\n        window.addEventListener(\"click\", (ev) => {\r\n            ev.stopPropagation()\r\n            this.clickEvent.invoke()\r\n        })*/\r\n        this.textInput.addEventListener(\"keydown\", (ev) => {\r\n            if (ev.key === \"Enter\" && this.textInput) {\r\n                ev.stopPropagation()\r\n                this.inputStringEvent.invoke(this.textInput.value)\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * DOMノードを表示位置に差し込む\r\n     */\r\n    private printDOMElement(e: Node) {\r\n        if (!this.currentLine) throw new Error()\r\n        this.currentLine.appendChild(e)\r\n        //this.texts.appendChild(e)\r\n    }\r\n\r\n    /**\r\n     * 改行されていない要素が最後だったら改行する\r\n     */\r\n    async ensureNewline() {\r\n        if (!this.currentLine) throw new Error()\r\n        if (this.currentLine.childElementCount !== 0)\r\n            await this.newline()\r\n    }\r\n    /**\r\n     * 改行する\r\n     */\r\n    newline() {\r\n        return this.newlineRaw(\"line\")\r\n    }\r\n    newlinec() {\r\n        return this.newlineRaw(\"cells\")\r\n    }\r\n    async newlineRaw(cls: string) {\r\n        if (!this.texts) throw new Error()\r\n        this.currentLine = document.createElement('div')\r\n        this.currentLine.classList.add(cls)\r\n        this.currentLine.classList.add(\"align-\" + this.currentAlign)\r\n        this.texts.appendChild(this.currentLine)\r\n        while (this.texts.childElementCount > 1000) {\r\n            const fc = this.texts.firstChild\r\n            if (fc)\r\n                this.texts.removeChild(fc)\r\n            //await this.waitTime(0)\r\n        }\r\n        await this.waitTime(0)\r\n        //this.addElement(document.createElement(\"br\"))\r\n    }\r\n\r\n    waitTime(milliseconds: number): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            this.scrollToBottom()\r\n            window.setTimeout(() => {\r\n                this.scrollToBottom()\r\n                resolve()\r\n            }, milliseconds)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 行の揃え位置を変える\r\n     */\r\n    align(kind: 'left' | 'center' | 'right') {\r\n        this.currentAlign = kind\r\n    }\r\n\r\n    /**\r\n     * ボタン解釈などせず表示する\r\n     */\r\n    async printNormalDOM(node: Node): Promise<void> {\r\n        if (this.currentPrintMode !== \"normal\") {\r\n            this.currentPrintMode = \"normal\"\r\n            await this.newline()\r\n        }\r\n        this.printDOMElement(node)\r\n    }\r\n    async printNormalRaw(str: string, tag?: string, addedClasses?: string[]): Promise<void> {\r\n        if (addedClasses) {\r\n            const t = document.createTextNode(str)\r\n            const span = document.createElement(tag ? tag : \"span\")\r\n            span.appendChild(t)\r\n            span.classList.add.apply(span.classList, addedClasses)\r\n            await this.printNormalDOM(span)\r\n        }\r\n        else {\r\n            await this.printNormalDOM(document.createTextNode(str))\r\n        }\r\n    }\r\n    async printCellDOM(node: Node): Promise<void> {\r\n        if (this.currentPrintMode !== \"cells\") {\r\n            this.currentPrintMode = \"cells\"\r\n            await this.newlinec()\r\n        }\r\n        await this.printDOMElement(node)\r\n    }\r\n    async printCellRaw(s: string, tag?: string, addedClasses?: string[]): Promise<void> {\r\n        const node = await this.autoFormatString(s)\r\n        node.classList.add(\"cell\")\r\n        await this.printCellDOM(node)\r\n    }\r\n\r\n    /**\r\n     * ボタンを表示する\r\n     */\r\n    async printButton(str: string, onclickValue: string): Promise<void> {\r\n        const node = await this.makeButton(str, onclickValue)\r\n        await this.printNormalDOM(node)\r\n    }\r\n\r\n    /**\r\n     * ボタン表示する。セルを使う\r\n     */\r\n    async printcButton(str: string, onclickValue: string): Promise<void> {\r\n        const node = await this.makeButton(str, onclickValue)\r\n        node.classList.add(\"cell\")\r\n        await this.printCellDOM(node)\r\n    }\r\n\r\n    /**\r\n     * ボタンのDOMノードを作成する\r\n     */\r\n    async makeButton(str: string, onclickValue: string): Promise<HTMLSpanElement> {\r\n        const txt = document.createTextNode(str)\r\n        const span = document.createElement(\"span\")\r\n\r\n        const f = () => {\r\n            this.inputStringEvent.invoke(onclickValue)\r\n        }\r\n        this.newerButtonStarters.push(() => {\r\n            span.classList.add(\"button\")\r\n            span.addEventListener(\"click\", f)\r\n        })\r\n        this.olderButtonDisposers.push(() => {\r\n            span.classList.remove(\"button\")\r\n            span.removeEventListener(\"click\", f)\r\n        })\r\n\r\n        span.appendChild(txt)\r\n        return span\r\n    }\r\n\r\n    /**\r\n     * 文字列を表示する。自動でボタン化などする\r\n     */\r\n    async prints(s: string): Promise<void> {\r\n        const node = await this.autoFormatString(s)\r\n        await this.printNormalDOM(node)\r\n    }\r\n\r\n    /**\r\n     * ボタン化などをされたDOMノードを返す\r\n     */\r\n    async autoFormatString(s: string): Promise<HTMLSpanElement> {\r\n        const span = document.createElement(\"span\")\r\n        const buttonRE = /[^\\[]*\\[(\\d+)\\][^\\[]*/g\r\n        let hit = false\r\n        while (true) {\r\n            const x = buttonRE.exec(s)\r\n            if (!x) break\r\n            hit = true\r\n            span.appendChild(await this.makeButton(x[0], x[1]))\r\n            //console.log(x)\r\n        }\r\n        if (!hit) {\r\n            span.appendChild(document.createTextNode(s))\r\n        }\r\n        return span\r\n    }\r\n\r\n    /**\r\n     * 文字列をテーブル風に表示する。自動でボタン化などする\r\n     * 実際の見た目はcssに依存する\r\n     */\r\n    async printc(s: string): Promise<void> {\r\n        const node = await this.autoFormatString(s)\r\n        node.classList.add(\"cell\")\r\n        await this.printCellDOM(node)\r\n    }\r\n    /**\r\n     * 文字列を表示して改行する\r\n     */\r\n    async printl(s?: string): Promise<void> {\r\n        if (s !== undefined)\r\n            await this.prints(s)\r\n        await this.newline()\r\n    }\r\n    /**\r\n     * エラー表示する\r\n     */\r\n    async printError(s?: string): Promise<void> {\r\n        if (s !== undefined)\r\n            await this.printNormalRaw(s, \"pre\", [\"error\"])\r\n        await this.newline()\r\n    }\r\n    /**\r\n     * 文字列を表示して改行して入力待ち状態にする\r\n     */\r\n    async printw(s?: string): Promise<void> {\r\n        if (s !== undefined)\r\n            await this.prints(s)\r\n        await this.newline()\r\n        await this.wait()\r\n    }\r\n    /**\r\n     * 横線を表示する\r\n     */\r\n    async drawLine() {\r\n        await this.ensureNewline()\r\n        const hr = document.createElement(\"hr\")\r\n        await this.printNormalDOM(hr)\r\n        await this.newline()\r\n    }\r\n\r\n    /**\r\n     * ゲージ表示する\r\n     */\r\n    async printBar(width: number, value: number, max: number) {\r\n        await this.printNormalDOM(this.makeBar(width, value, max))\r\n    }\r\n\r\n    /**\r\n     * ゲージ表示のDOMノードを作成する\r\n     */\r\n    private makeBar(width: number, value: number, max: number) {\r\n        const textMode = false\r\n        const ret = document.createElement(\"span\")\r\n        const addSpan = (cls: string, content?: string) => {\r\n            const span = document.createElement(\"span\")\r\n            span.classList.add(cls)\r\n            if (content) {\r\n                span.appendChild(document.createTextNode(content))\r\n            }\r\n            ret.appendChild(span)\r\n            return span\r\n        }\r\n        ret.classList.add(\"bar\")\r\n        if (textMode) {\r\n            const filledChar = \"*\"\r\n            const unfilledChar = \".\"\r\n            width = Math.ceil(width)\r\n            let result = \"\"\r\n            const charUnit = max / width\r\n            for (let i = 0; i < width; i++) {\r\n                //console.log(i, charUnit, value, max, width)\r\n                if (i == 0) {\r\n                    addSpan(\"startChar\", \"[\")\r\n                }\r\n                else if (i == width-1) {\r\n                    addSpan(\"endChar\", \"]\")\r\n                }\r\n                else {\r\n                    if (value < charUnit * i) {\r\n                        addSpan(\"unfilledChar\", \".\")\r\n                    }\r\n                    else {\r\n                        addSpan(\"filledChar\", \"*\")\r\n                    }\r\n                }\r\n            }\r\n            ret.appendChild(document.createTextNode(result))\r\n        }\r\n        else {\r\n            const ratio = Math.max(0, Math.min(1, value / max))\r\n            const filled = addSpan(\"filled\")\r\n            const unfilled = addSpan(\"unfilled\")\r\n            filled.style.width = `${width * ratio * 0.5}em`\r\n            unfilled.style.width = `${width * (1 - ratio) * 0.5}em`\r\n        }\r\n        return ret\r\n    }\r\n\r\n    /**\r\n     * 数値を入力する\r\n     */\r\n    async inputNumber(): Promise<number> {\r\n        await io.ensureNewline()\r\n        while (true) {\r\n            const s = await this.inputStringInternal(\"(数値入力待ち)\")\r\n            if (s === \"\" || isNaN(+s)) continue\r\n            //await this.printl(\"\" + s)\r\n            return +s\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 文字列を入力する\r\n     */\r\n    async inputString(): Promise<string> {\r\n        await io.ensureNewline()\r\n        const s = await this.inputStringInternal(\"(文字列入力待ち)\")\r\n        //await this.printl(s)\r\n        return s\r\n    }\r\n\r\n    /**\r\n     * 文字列入力する\r\n     */\r\n    private inputStringInternal(display: string): Promise<string> {\r\n        return new Promise((resolve) => {\r\n            for (const f of this.newerButtonStarters)\r\n                f()\r\n            this.newerButtonStarters.splice(0, this.newerButtonStarters.length)\r\n\r\n            const disp = this.inputStringEvent.addListener((str) => {\r\n                disp()\r\n                if (this.textInput) {\r\n                    this.textInput.placeholder = \"\"\r\n                    this.textInput.value = \"\"\r\n                }\r\n                for (const f of this.olderButtonDisposers)\r\n                    f()\r\n                this.olderButtonDisposers.splice(0, this.olderButtonDisposers.length)\r\n\r\n                resolve(str)\r\n            })\r\n            if (this.lastElement) {\r\n                //this.lastElement.textContent = display\r\n                this.lastElement.textContent = \"\"\r\n            }\r\n            this.scrollToBottom()\r\n            if (this.textInput) {\r\n                this.textInput.value = \"\"\r\n                this.textInput.placeholder = display\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 入力待ち状態に入る\r\n     */\r\n    wait(): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            this.ensureNewline()\r\n            if (this.textInput) {\r\n                this.textInput.value = \"\"\r\n                this.textInput.placeholder = \"(クリックで進む)\"\r\n            }\r\n            this.scrollToBottom()\r\n            const ok = () => {\r\n                disp1()\r\n                disp2()\r\n                if (this.textInput)\r\n                    this.textInput.value = \"\"\r\n                if (this.lastElement)\r\n                    this.lastElement.textContent = \"\"\r\n                resolve()\r\n            }\r\n            const disp1 = this.clickEvent.addListener(() => { ok() })\r\n            const disp2 = this.inputStringEvent.addListener(() => { ok() })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 一番下にスクロールする\r\n     */\r\n    private scrollToBottom() {\r\n        if (this.lastElement) {\r\n            this.lastElement.scrollIntoView()\r\n        }\r\n        window.setTimeout(() => {\r\n            if (this.lastElement) {\r\n                this.lastElement.scrollIntoView()\r\n            }\r\n            if (this.textInput)\r\n                this.textInput.focus()\r\n        }, 0)\r\n    }\r\n\r\n    /**\r\n     * 選択肢を表示する\r\n     */\r\n    async branch<T>(o: [string, T][]): Promise<T> {\r\n        await io.ensureNewline()\r\n        while (true) {\r\n            let i = 0\r\n            for (const [name, proc] of o) {\r\n                await io.printcButton(name, \"\" + i)\r\n                //await io.newline()\r\n                i++\r\n            }\r\n            const num = await io.inputNumber()\r\n            if (num < 0 || num >= o.length) continue\r\n            return o[num][1]\r\n        }\r\n    }\r\n    branchBlank<T>(): [string, T][] {\r\n        return []\r\n    }\r\n}\r\n\r\nexport const io = new IO()\r\nexport const initializeModule = new AsyncEvent()\r\ninitializeModule.addListener(async () => {\r\n    io.initialize()\r\n})\r\n\r\n\r\n","// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.4\nvar LZString = (function() {\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\n  return LZString;\n})();\n\nif (typeof define === 'function' && define.amd) {\n  define(function () { return LZString; });\n} else if( typeof module !== 'undefined' && module != null ) {\n  module.exports = LZString\n}\n","import * as lz from 'lz-string'\r\n\r\n\r\nexport class SaveManager {\r\n    classes = new Map<string, Function>()\r\n    classNames = new Map<Function, string>()\r\n    map = new Map<any, string[]>()\r\n\r\n    registerClass(cls: any, name: string) {\r\n        //console.log(`register class`, cls, name)\r\n        this.classes.set(name, cls)\r\n        this.classNames.set(cls, name)\r\n    }\r\n    registerMember(cls: any, key: string) {\r\n        //console.log(\"register member\", cls, key)\r\n        const a = this.map.get(cls)\r\n        if (a === undefined) {\r\n            this.map.set(cls, [key])\r\n        }\r\n        else {\r\n            a.push(key)\r\n        }\r\n    }\r\n\r\n    saveStorage(slotKey: string, value: string) {\r\n        window.localStorage.setItem(slotKey, value)\r\n    }\r\n    loadStorage(slotKey: string): string {\r\n        return window.localStorage.getItem(slotKey) || \"\"\r\n    }\r\n    removeStorage(slotKey: string) {\r\n        window.localStorage.removeItem(slotKey)\r\n    }\r\n\r\n    serialize(obj: any): string {\r\n        const d = this.convertToSerializableData(obj)\r\n        const str = JSON.stringify(d)\r\n        const ret = lz.compressToBase64(str)\r\n        return ret\r\n    }\r\n    deserialize(str: string): any {\r\n        const json = lz.decompressFromBase64(str)\r\n        const obj = JSON.parse(json)\r\n        const d = this.makeFromSerializableData(obj)\r\n        return d\r\n    }\r\n    clone<T>(obj: T): T {\r\n        //console.log(\"clone\", obj)\r\n        const d = this.convertToSerializableData(obj)\r\n        //console.log(\"clone inter\", d)\r\n        const ret = this.makeFromSerializableData(d)\r\n        //console.log(\"cloned\", ret)\r\n        return ret\r\n    }\r\n\r\n    makeFromSerializableData(obj: any): any {\r\n        if (obj === null)\r\n            return null\r\n        else if (obj === undefined)\r\n            return undefined\r\n        else if (typeof (obj) === \"symbol\")\r\n            return undefined\r\n        else if (typeof (obj) === \"function\")\r\n            return undefined\r\n        else if (typeof (obj) === \"number\")\r\n            return obj\r\n        else if (typeof (obj) === \"boolean\")\r\n            return obj\r\n        else if (typeof (obj) === \"string\")\r\n            return obj\r\n        else if (typeof (obj) === \"object\") {\r\n            const clsName = obj.__class__\r\n            if (clsName === \"Map\") {\r\n                const ret = new Map()\r\n                const members = obj.__data__\r\n                for (const [k, v] of members) {\r\n                    if (k !== undefined && v !== undefined)\r\n                        ret.set(k, v)\r\n                }\r\n                return ret\r\n            }\r\n            else if (this.classes.has(clsName)) {\r\n                const cls = this.classes.get(clsName)\r\n                const data = obj.__data__\r\n                //console.log(`load ${clsName}`, cls, data)\r\n                if (cls && data) {\r\n                    const o = new (<any>cls)()\r\n                    for (const k in data) {\r\n                        const val = this.makeFromSerializableData(data[k])\r\n                        o[k] = val\r\n                    }\r\n                    return o\r\n                }\r\n                else {\r\n                    return obj\r\n                }\r\n            }\r\n            else {\r\n                return obj\r\n            }\r\n        }\r\n        else {\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    convertToSerializableData(obj: any): any {\r\n        if (obj === null)\r\n            return null\r\n        else if (obj === undefined)\r\n            return undefined\r\n        else if (typeof (obj) === \"symbol\")\r\n            return undefined\r\n        else if (typeof (obj) === \"function\")\r\n            return undefined\r\n        else if (typeof (obj) === \"number\")\r\n            return obj\r\n        else if (typeof (obj) === \"boolean\")\r\n            return obj\r\n        else if (typeof (obj) === \"string\")\r\n            return obj\r\n        else if (obj instanceof Array) {\r\n            const ret = []\r\n            for (let i = 0; i < obj.length; i++) {\r\n                ret.push(this.convertToSerializableData(obj[i]))\r\n            }\r\n            return ret\r\n        }\r\n        else if (obj instanceof Map) {\r\n            const ret = Object.create(null)\r\n            ret.__class__ = \"Map\"\r\n            const members = Array()\r\n            ret.__data__ = members\r\n            obj.forEach((v, k, m) => {\r\n                members.push([k, v])\r\n            })\r\n            return ret\r\n        }\r\n        else if (typeof (obj) === \"object\") {\r\n            const c = obj.constructor\r\n            const name = this.classNames.get(c)\r\n            const keys = this.map.get(c)\r\n            //console.log(\"ctor\", c, name, keys, obj)\r\n            if (name && keys) {\r\n                const data = Object.create(null)\r\n                for (const k of keys) {\r\n                    const val = obj[k]\r\n                    const ser = this.convertToSerializableData(val)\r\n                    //console.log(\"mem \", k, val, ser)\r\n                    if (val !== undefined)\r\n                        data[\"\"+k] = val\r\n                }\r\n                const ret = Object.create(null)\r\n                ret.__class__ = name\r\n                ret.__data__ = data\r\n                //console.log(ret)\r\n                return ret\r\n            }\r\n            else {\r\n                return undefined\r\n            }\r\n        }\r\n        else {\r\n            return undefined\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * シリアライザのシングルトンインスタンス\r\n */\r\nexport const serializer = new SaveManager()\r\n\r\n\r\n/**\r\n * メンバー変数に付けるデコレータ。\r\n * saveclassデコレータが付いたクラスのメンバーに付けるとシリアライザを通して自動的に保存されるようになる。\r\n */\r\nexport const savedata = (target: any, key: string) => {\r\n    //console.log(\"@save\")\r\n    //console.log(target)\r\n    //console.log(key)\r\n    serializer.registerMember(target.constructor, key)\r\n}\r\n\r\n\r\n/**\r\n * クラスに付けるデコレータ。\r\n * 付けられたクラスはシリアライザを通して自動的に保存されるようになる。\r\n * savedataデコレータを付けられたメンバーが保存対象となる。\r\n */\r\n/*\r\nexport const saveclass = (cls: any) => {\r\n    //console.log(\"@saveObject\")\r\n    //console.log(cls)\r\n    serializer.registerClass(cls, cls.name)\r\n}\r\n*/\r\n\r\nexport const saveclass = (name: string) => {\r\n    return (cls: any) => {\r\n        //console.log(\"@saveObject\")\r\n        //console.log(cls)\r\n        serializer.registerClass(cls, name)\r\n    }\r\n}\r\n","\r\nexport const uniqueId = (length = 12): string => {\r\n    const a = new Uint8Array(length)\r\n    window.crypto.getRandomValues(a)\r\n    const bin = String.fromCharCode.apply(null, <any>a)\r\n    const str = btoa(bin)\r\n    return str.substr(0, length)\r\n}\r\n\r\n\r\n\r\n","import \"./charaloader\"\r\n\r\nexport class CharacterDef {\r\n    static prepareFunctions: ((c: CharacterDef) => void)[] = []\r\n\r\n    constructor() {\r\n        for (const f of CharacterDef.prepareFunctions) {\r\n            f(this)\r\n        }\r\n    }\r\n\r\n    番号 = -1\r\n    名前 = \"＜名前＞\"\r\n    呼び名 = \"＜呼び名＞\"\r\n}\r\n\r\n","import { io } from \"../io\"\r\nimport { CharacterReference } from \"../character\"\r\nimport { ExpTable } from \"./exp\"\r\n\r\n\r\nexport const viewAnyCharacterStatus = async () => {\r\n\r\n}\r\n\r\nexport const viewStatus = async (c: CharacterReference) => {\r\n    await io.drawLine()\r\n    await io.printl(`名前: ${c.呼び名} (${c.名前})`)\r\n\r\n    await viewGauge(c)\r\n    await io.drawLine()\r\n    await viewExp(c)\r\n}\r\n\r\n\r\nexport const viewExp = async (c: CharacterReference) => {\r\n    await io.printc(`キス経験: ${c.経験.キス}`)\r\n    await io.printc(`絶頂経験: ${c.経験.絶頂}`)\r\n    await io.printc(`精液経験: ${c.経験.精液}`)\r\n    await io.printc(`噴乳経験: ${c.経験.噴乳}`)\r\n    await io.printc(`精飲経験: ${c.経験.精飲}`)\r\n    await io.printc(`膣射経験: ${c.経験.膣射}`)\r\n    await io.printc(`射精経験: ${c.経験.射精}`)\r\n}\r\n\r\n\r\nexport const viewGauge = async (c: CharacterReference) => {\r\n    await io.prints(`　体力: ${c.変動.体力.value}/${c.変動.体力.max}`)\r\n    await io.printBar(30, c.変動.体力.value, c.変動.体力.max)\r\n    //await io.printBar(12, c.変動.体力.value, c.変動.体力.max)\r\n    await io.newline()\r\n    await io.prints(`　気力: ${c.変動.気力.value}/${c.変動.気力.max}`)\r\n    await io.printBar(30, c.変動.気力.value, c.変動.気力.max)\r\n    await io.newline()\r\n    //await io.printl(`　勃起: ${c.変動.勃起.value}/${c.変動.勃起.max}`)\r\n    //await io.printl(`　精力: ${c.変動.精力.value}/${c.変動.精力.max}`)\r\n}\r\n\r\n","import { AsyncEvent } from \"./event\";\r\n\r\n\r\nexport interface InitializableModule {\r\n    initializeModule: AsyncEvent<void>\r\n}\r\n\r\nexport const makeModuleInitializer = (...ms: Promise<InitializableModule>[]) => {\r\n    const r = new AsyncEvent()\r\n    r.addListener(async () => {\r\n        for (const mp of ms) {\r\n            const module = await mp\r\n            await module.initializeModule.invoke()\r\n        }\r\n    })\r\n    return r\r\n}\r\n\r\n\r\n","\r\nexport const tuple = <T extends string[]>(...args: T) => <T>Object.freeze(args);\r\nexport const constMap = <T extends {[s:string]:string}>(o: T) => o;\r\nexport const keys = <T, K extends keyof T>(o: T): K[] => <K[]>Object.keys(o);\r\n\r\nexport const isInArray = <T extends string[]>(key: string, array: T): key is T[number] => {\r\n    const idx = array.indexOf(key)\r\n    return idx !== -1\r\n}\r\n\r\nexport const getOrDefault = <T>(o: any, key: string, defaultValue: T): T => {\r\n    if (!o || typeof (o) !== 'object') {\r\n        return defaultValue\r\n    }\r\n    const val = o[key]\r\n    if (typeof (val) === typeof (defaultValue))\r\n        return val\r\n    else\r\n        return defaultValue\r\n}\r\n\r\nexport const getString = <T>(o: any, key: string, defaultValue: T): string | T => {\r\n    if (!o || typeof (o) !== 'object') {\r\n        return defaultValue\r\n    }\r\n    const val = o[key]\r\n    if (typeof (val) === 'string')\r\n        return val\r\n    else\r\n        return defaultValue\r\n}\r\n\r\nexport const getStringOrError = (o: any, key: string, errorString: string): string => {\r\n    if (!o || typeof (o) !== 'object') {\r\n        throw new Error(errorString)\r\n    }\r\n    const val = o[key]\r\n    if (typeof (val) === 'string')\r\n        return val\r\n    else\r\n        throw new Error(errorString)\r\n}\r\n\r\nexport const getNumber = <T>(o: any, key: string, defaultValue: T): number | T => {\r\n    if (!o || typeof (o) !== 'object') {\r\n        return defaultValue\r\n    }\r\n    const val = o[key]\r\n    if (typeof (val) === 'number')\r\n        return val\r\n    else\r\n        return defaultValue\r\n}\r\n\r\n","import { savedata, saveclass, serializer } from '../savedata'\r\nimport { CharacterDef } from '../charadef'\r\nimport { CharactersContainer, UnidirectionalRelationship } from '../character'\r\nimport { tuple } from '../util/tuple';\r\nimport { AsyncEvent } from '../util/event';\r\nconsole.log(\"exp\")\r\n\r\nexport const initializeModule = new AsyncEvent()\r\n\r\ninitializeModule.addListener(async () => {\r\n    CharacterDef.prepareFunctions.push(c => {\r\n        c.経験 = new ExpTable()\r\n    })\r\n    CharactersContainer.prepareFunctions.push((c, d) => {\r\n        if (d) {\r\n            c.経験 = serializer.clone(d.経験)\r\n        }\r\n        else {\r\n            c.経験 = new ExpTable()\r\n        }\r\n    })\r\n})\r\n\r\n\r\ndeclare module '../character' {\r\n    interface UnidirectionalRelationship {\r\n        受けた経験: ExpTable\r\n    }\r\n}\r\ninitializeModule.addListener(async () => {\r\n    UnidirectionalRelationship.initializers.push(o => {\r\n        o.受けた経験 = new ExpTable()\r\n    })\r\n})\r\n\r\n\r\n\r\n/**\r\n * 部位ごとの経験\r\n */\r\n@saveclass(\"partexp\")\r\nexport class PartExp {\r\n    @savedata 快楽 = 0\r\n    @savedata 無自覚快楽 = 0\r\n    @savedata 自慰 = 0\r\n    @savedata 拡張 = 0\r\n    @savedata Ｐ挿入 = 0\r\n    @savedata 絶頂 = 0\r\n    @savedata 無自覚絶頂 = 0\r\n    @savedata 精液 = 0\r\n    @savedata キス = 0\r\n}\r\nexport const KeyOfPartExp: (keyof PartExp)[] = tuple(\r\n    \"快楽\", \"無自覚快楽\",\r\n    \"絶頂\", \"無自覚絶頂\",\r\n    \"自慰\", \"拡張\", \"Ｐ挿入\", \"精液\", \"キス\",\r\n)\r\nexport const isPartExp = (o: any): o is PartExp => {\r\n    if (typeof(o) !== 'object')\r\n        return false\r\n    for (const k in KeyOfPartExp) {\r\n        if (typeof (o[k]) !== 'number')\r\n            return false\r\n    }\r\n    return true\r\n}\r\n\r\n\r\n\r\n/*\r\ninterface BodyPart<T> {\r\n    Ｃ: T\r\n    Ｐ: T\r\n    Ｖ: T\r\n    Ａ: T\r\n    Ｂ: T\r\n    Ｍ: T\r\n}\r\n*/\r\n\r\n\r\n/**\r\n * 受動および自動経験(旧EXP)\r\n * \r\n * 関係にも使う。つまり誰に何をされたとかも統計取る\r\n * 逆方向を調べれば誰に何をしたかを知ることができる。そっちは頻度が少なそうなので今のところいちいち計算する\r\n */\r\n@saveclass(\"exptable\")\r\nexport class ExpTable {\r\n    @savedata Ｃ = new PartExp()\r\n    @savedata Ｐ = new PartExp()\r\n    @savedata Ｖ = new PartExp()\r\n    @savedata Ａ = new PartExp()\r\n    @savedata Ｂ = new PartExp()\r\n    @savedata Ｍ = new PartExp()\r\n    @savedata 手淫 = 0\r\n    @savedata 口淫 = 0\r\n    @savedata パイズリ = 0\r\n    @savedata 絶頂 = 0\r\n    @savedata 射精 = 0\r\n    @savedata 噴乳 = 0\r\n    @savedata 放尿 = 0\r\n    @savedata 精液 = 0\r\n    @savedata 精飲 = 0\r\n    @savedata 膣射 = 0\r\n    @savedata 肛射 = 0\r\n    @savedata キス = 0\r\n    @savedata 調教 = 0\r\n    @savedata レズ = 0\r\n    @savedata ゲイ = 0\r\n\r\n    @savedata 奉仕快楽 = 0\r\n    @savedata 苦痛快楽 = 0\r\n    @savedata 嗜虐快楽 = 0\r\n    @savedata 露出快楽 = 0\r\n    @savedata 愛情 = 0\r\n}\r\nexport const KeyOfExpTable = tuple(\r\n    \"Ｃ\", \"Ｐ\", \"Ｖ\", \"Ａ\", \"Ｂ\", \"Ｍ\",\r\n    \"手淫\", \"口淫\", \"パイズリ\",\r\n    \"絶頂\", \"射精\", \"噴乳\", \"放尿\", \"精液\", \"精飲\", \"膣射\", \"肛射\", \"キス\",\r\n    \"調教\", \"レズ\", \"ゲイ\",\r\n    \"奉仕快楽\", \"苦痛快楽\", \"嗜虐快楽\", \"露出快楽\", \"愛情\",\r\n)\r\nexport const isExpTable = (o: any): o is ExpTable => {\r\n    if (typeof(o) !== 'object')\r\n        return false\r\n    for (const k in KeyOfExpTable) {\r\n        if (o[k] === undefined)\r\n            return false\r\n    }\r\n    return true\r\n}\r\n\r\n\r\n","import { savedata, saveclass, serializer } from '../savedata'\r\nimport { CharacterDef } from '../charadef'\r\nimport { CharactersContainer } from '../character'\r\nimport { tuple } from '../util/tuple';\r\nimport { AsyncEvent } from '../util/event';\r\nconsole.log(\"gauge\")\r\n\r\nexport const initializeModule = new AsyncEvent()\r\n\r\ninitializeModule.addListener(async () => {\r\n    CharacterDef.prepareFunctions.push(c => {\r\n        c.変動 = new GaugeTable()\r\n        c.スコア = new GaugeTable()\r\n    })\r\n    CharactersContainer.prepareFunctions.push((c, d) => {\r\n        if (d) {\r\n            c.変動 = serializer.clone(d.変動)\r\n            c.スコア = serializer.clone(d.スコア)\r\n        }\r\n        else {\r\n            c.変動 = new GaugeTable()\r\n            c.スコア = new GaugeTable()\r\n        }\r\n    })\r\n})\r\n\r\n/**\r\n * 変動(旧基礎もしくはBASE PALAM JUEL)\r\n */\r\n@saveclass(\"gaugetable\")\r\nexport class GaugeTable {\r\n    static extensionInitializer: ((o: GaugeTable) => void)[] = []\r\n    constructor() {\r\n        for (const f of GaugeTable.extensionInitializer) {\r\n            f(this)\r\n        }\r\n    }\r\n\r\n    @savedata 体力 = new Gauge()\r\n    @savedata 気力 = new Gauge()\r\n    @savedata 年齢 = new Gauge()\r\n}\r\n/**\r\n * モジュール側でGaugeTableを拡張したら同時に適宜push()するようにしましょう\r\n */\r\nexport const KeyOfGaugeTable: (keyof GaugeTable)[] = [\r\n    \"体力\",\r\n    \"気力\",\r\n    \"年齢\",\r\n]\r\n\r\n\r\n\r\n\r\n/**\r\n * 変動する値を表現する。\r\n * \r\n * 現在値と最小値と最大値を持ち、範囲内に収めたりチェックしたりする。\r\n */\r\n@saveclass(\"gauge\")\r\nexport class Gauge {\r\n    constructor(value?: number, minValue?: number, maxValue?: number) {\r\n        this.value = (value !== undefined) ? value : 0\r\n        this.min = (minValue !== undefined) ? minValue : 0\r\n        this.max = (maxValue !== undefined) ? maxValue : Number.POSITIVE_INFINITY\r\n    }\r\n    @savedata max = Number.POSITIVE_INFINITY\r\n    @savedata min = 0\r\n    @savedata value = 0\r\n}\r\n\r\n","import { savedata, saveclass, serializer } from '../savedata'\r\nimport { CharacterDef } from '../charadef'\r\nimport { CharactersContainer } from '../character'\r\nimport { tuple } from '../util/tuple';\r\nimport { AsyncEvent } from '../util/event';\r\nconsole.log(\"level\")\r\n\r\nexport const initializeModule = new AsyncEvent()\r\n\r\ninitializeModule.addListener(async () => {\r\n    CharacterDef.prepareFunctions.push(c => {\r\n        c.レベル = new LevelTable()\r\n    })\r\n    CharactersContainer.prepareFunctions.push((c, d) => {\r\n        if (d) {\r\n            c.レベル = serializer.clone(d.レベル)\r\n        }\r\n        else {\r\n            c.レベル = new LevelTable()\r\n        }\r\n    })\r\n})\r\n\r\n/**\r\n * レベル(旧能力もしくはABL MARK)\r\n */\r\n@saveclass(\"leveltable\")\r\nexport class LevelTable {\r\n    @savedata Ｃ感覚 = 0\r\n    @savedata Ｐ感覚 = 0\r\n    @savedata Ｖ感覚 = 0\r\n    @savedata Ａ感覚 = 0\r\n    @savedata Ｂ感覚 = 0\r\n    @savedata Ｍ感覚 = 0\r\n\r\n    @savedata 親密 = 0\r\n    @savedata 従順 = 0\r\n    @savedata 欲望 = 0\r\n    @savedata 技巧 = 0\r\n    @savedata 奉仕精神 = 0\r\n    @savedata 露出癖 = 0\r\n    @savedata マゾっ気 = 0\r\n    @savedata サドっ気 = 0\r\n    @savedata レズっ気 = 0\r\n    @savedata ホモっ気 = 0\r\n\r\n    @savedata 自慰中毒 = 0\r\n    @savedata 精液中毒 = 0\r\n    @savedata レズ中毒 = 0\r\n    @savedata ゲイ中毒 = 0\r\n    @savedata 膣射中毒 = 0\r\n    @savedata 肛射中毒 = 0\r\n\r\n    @savedata 苦痛刻印 = 0\r\n    @savedata 快楽刻印 = 0\r\n    @savedata 反発刻印 = 0\r\n}\r\n\r\nexport const KeyOfLevelTable = tuple(\r\n    \"Ｃ感覚\",\r\n    \"Ｐ感覚\",\r\n    \"Ｖ感覚\",\r\n    \"Ａ感覚\",\r\n    \"Ｂ感覚\",\r\n    \"Ｍ感覚\",\r\n    \"親密\",\r\n    \"従順\",\r\n    \"欲望\",\r\n    \"技巧\",\r\n    \"奉仕精神\",\r\n    \"露出癖\",\r\n    \"マゾっ気\",\r\n    \"サドっ気\",\r\n    \"レズっ気\",\r\n    \"ホモっ気\",\r\n    \"自慰中毒\",\r\n    \"精液中毒\",\r\n    \"レズ中毒\",\r\n    \"ゲイ中毒\",\r\n    \"膣射中毒\",\r\n    \"肛射中毒\",\r\n    \"苦痛刻印\",\r\n    \"快楽刻印\",\r\n    \"反発刻印\",\r\n)\r\n\r\n\r\n","import { saveclass, savedata, serializer } from \"../savedata\";\r\nimport { CharacterDef } from \"../charadef\";\r\nimport { CharactersContainer } from \"../character\";\r\nimport { AsyncEvent } from \"../util/event\";\r\n\r\nexport const initializeModule = new AsyncEvent()\r\n\r\ninitializeModule.addListener(async () => {\r\n    CharacterDef.prepareFunctions.push(c => {\r\n        c.汚れ = new StainTable()\r\n    })\r\n    CharactersContainer.prepareFunctions.push((c, d) => {\r\n        if (d) {\r\n            c.汚れ = serializer.clone(d.汚れ)\r\n        }\r\n        else {\r\n            c.汚れ = new StainTable()\r\n        }\r\n    })\r\n})\r\n\r\n\r\nexport enum StainType {\r\n    Ｖ,\r\n    Ｐ,\r\n    Ａ,\r\n    愛液,\r\n    精液,\r\n    粘液,\r\n    ローション,\r\n    母乳,\r\n    破瓜の血,\r\n}\r\n\r\n\r\n@saveclass(\"stain\")\r\nexport class Stain {\r\n    @savedata private contents = new Set<StainType>()\r\n\r\n    static blendEach(...stains: Stain[]) {\r\n        for (const s1 of stains) {\r\n            for (const s2 of stains) {\r\n                if (s1 === s2) continue\r\n                s1.setFrom(s2)\r\n            }\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this.contents.clear()\r\n    }\r\n    has(t: StainType) {\r\n        return this.contents.has(t)\r\n    }\r\n    set(t: StainType) {\r\n        this.contents.add(t)\r\n    }\r\n    setFrom(t: Stain) {\r\n        t.contents.forEach((v) => this.set(v))\r\n    }\r\n    remove(t: StainType) {\r\n        this.contents.delete(t)\r\n    }\r\n    blend(t: Stain): Stain {\r\n        const ret = new Stain()\r\n        ret.setFrom(this)\r\n        ret.setFrom(t)\r\n        return ret\r\n    }\r\n}\r\n\r\n@saveclass(\"staintable\")\r\nexport class StainTable {\r\n    @savedata Ｖ = new Stain()\r\n    @savedata Ｂ = new Stain()\r\n    @savedata Ｐ = new Stain()\r\n    @savedata Ａ = new Stain()\r\n    @savedata Ｍ = new Stain()\r\n    @savedata 手 = new Stain()\r\n    @savedata 膣内 = new Stain()\r\n    @savedata 腸内 = new Stain()\r\n}\r\n\r\n","import { savedata, saveclass, serializer } from '../savedata'\r\nimport { CharacterDef } from '../charadef'\r\nimport { CharactersContainer } from '../character'\r\nimport { AsyncEvent } from '../util/event';\r\nconsole.log(\"trait\")\r\n\r\nexport const initializeModule = new AsyncEvent()\r\n\r\ninitializeModule.addListener(async () => {\r\n    CharacterDef.prepareFunctions.push(c => {\r\n        c.特性 = new TraitTable()\r\n    })\r\n    CharactersContainer.prepareFunctions.push((c, d) => {\r\n        if (d) {\r\n            c.特性 = serializer.clone(d.特性)\r\n        }\r\n        else {\r\n            c.特性 = new TraitTable()\r\n        }\r\n    })\r\n})\r\n\r\n\r\n/**\r\n * 特性(旧素質もしくはTALENT)\r\n * \r\n * Emueraで用途が逸れていったTALENTと違いbooleanしか持たない。\r\n * 旧TALENTでenum的な使い方がされてしまったのは、プロパティ関数的な存在がなかった、もしくは非常に手が届きにくかったから。\r\n * 作ったとしても必ずグローバル関数にせざるを得ない事情もあった。\r\n * ここではそういうことはない。そういう使い方を望むなら独自関数をexport定義するなりするべし\r\n */\r\n@saveclass(\"traittable\")\r\nexport class TraitTable {\r\n    @savedata 処女 = false\r\n    @savedata 童貞 = false\r\n\r\n    // 体の特徴\r\n    @savedata Ｐ有り = false\r\n    @savedata Ｖ有り = true\r\n    @savedata Ｂ有り = true\r\n    @savedata Ｃ有り = true\r\n    /*\r\n    人外も作りたいならこんな感じ\r\n    @savedata Ａ有り = true\r\n    @savedata Ｍ有り = true\r\n    @savedata 尻尾有り = false\r\n    @savedata 卵管有り = false\r\n    @savedata 耳有り = true\r\n    @savedata 触手有り = false\r\n    @savedata はね有り = false\r\n    @savedata 毛皮有り = false\r\n    */\r\n\r\n    @savedata 小人 = false\r\n    @savedata 幼児体型 = false\r\n    @savedata 小柄 = false\r\n    @savedata 長身 = false\r\n    @savedata 巨躯 = false\r\n    @savedata 巨人 = false\r\n\r\n    @savedata 巨乳 = false\r\n    @savedata 貧乳 = false\r\n    @savedata 爆乳 = false\r\n    @savedata 絶壁 = false\r\n    @savedata 巨根 = false\r\n    @savedata 短小 = false\r\n\r\n\r\n    //\r\n    @savedata 恋慕 = false\r\n    @savedata 親愛 = false\r\n    @savedata 淫乱 = false\r\n    @savedata 娼婦 = false\r\n    @savedata 服従 = false\r\n    @savedata 隷属 = false\r\n\r\n    @savedata 醜悪 = false\r\n    @savedata 容姿端麗 = false\r\n\r\n    //\r\n    @savedata 臆病 = false\r\n    @savedata 気丈 = false\r\n    @savedata 素直 = false\r\n    @savedata 反抗的 = false\r\n    @savedata 大人しい = false\r\n    @savedata 生意気 = false\r\n    @savedata プライド低い = false\r\n    @savedata プライド高い = false\r\n    @savedata ツンデレ = false\r\n    @savedata マゾ = false\r\n    @savedata サド = false\r\n\r\n    @savedata 自制心 = false\r\n    @savedata 無関心 = false\r\n    @savedata 感情乏しい = false\r\n    @savedata 保守的 = false\r\n    @savedata 好奇心 = false\r\n    @savedata 陰気 = false\r\n    @savedata 陽気 = false\r\n    @savedata 一線越えない = false\r\n    @savedata 目立ちたがり = false\r\n    @savedata 無知 = false\r\n\r\n    @savedata 貞操無頓着 = false\r\n    @savedata 貞操観念 = false\r\n    @savedata 抑圧 = false\r\n    @savedata 解放 = false\r\n    @savedata 抵抗 = false\r\n    @savedata 恥薄い = false\r\n    @savedata 恥じらい = false\r\n    @savedata 弱味 = false\r\n    @savedata 痛みに強い = false\r\n    @savedata 痛みに弱い = false\r\n    @savedata 濡れにくい = false\r\n    @savedata 濡れやすい = false\r\n    @savedata 習得遅い = false\r\n    @savedata 習得早い = false\r\n    @savedata 器用な指 = false\r\n    @savedata 舌使い = false\r\n    @savedata 針さばき = false\r\n    @savedata 猫舌 = false\r\n    @savedata 調合知識 = false\r\n    @savedata 薬毒耐性 = false\r\n    @savedata おもらし癖 = false\r\n\r\n    @savedata 両刀 = false\r\n    @savedata 即落ち = false\r\n    @savedata 盲信 = false\r\n    @savedata 魅惑 = false\r\n    @savedata 謎の魅力 = false\r\n    @savedata 鼓舞 = false\r\n\r\n    @savedata 汚れ無視 = false\r\n    @savedata 潔癖症 = false\r\n    \r\n}\r\n\r\n\r\n\r\n","/**\r\n * この階層内のモジュールをすべて読み込む\r\n */\r\nimport { CharacterReference } from \"../character\"\r\nimport { CharacterDef } from '../charadef'\r\nimport { ExpTable } from \"./exp\"\r\nimport { GaugeTable } from \"./gauge\"\r\nimport { TraitTable } from \"./trait\"\r\nimport { LevelTable } from \"./level\"\r\nimport { StainTable } from \"./stain\";\r\nimport './view'\r\nimport { AsyncEvent } from '../util/event';\r\nimport { makeModuleInitializer } from '../util/moduleInitializer';\r\n\r\nconsole.log(\"characterstatus\")\r\n\r\n\r\nexport interface CharacterValues {\r\n    経験: ExpTable\r\n    変動: GaugeTable\r\n    スコア: GaugeTable\r\n    特性: TraitTable\r\n    レベル: LevelTable\r\n    汚れ: StainTable\r\n}\r\n\r\ndeclare module '../character' {\r\n    interface CharacterReference extends CharacterValues {\r\n    }\r\n}\r\ndeclare module '../charadef' {\r\n    interface CharacterDef extends CharacterValues {\r\n    }\r\n}\r\n\r\n\r\nexport const initializeModule = makeModuleInitializer(\r\n    import('./exp'),\r\n    import('./gauge'),\r\n    import('./level'),\r\n    import('./stain'),\r\n    import('./trait'),\r\n)\r\n\r\n\r\n\r\n\r\n","\r\nexport const clamp = (n: number, min: number, max: number) => Math.max(min, Math.min(max, n))\r\n\r\n","\r\n/**\r\n * 経験数の段階上昇に必要な値\r\n */\r\nexport const expLevels = Object.freeze([0, 1, 4, 20, 50, 200, 500, 1000, 2000, 3000, 4000, 5000, 6000])\r\n\r\n/**\r\n * 変動値の段階上昇に必要な値\r\n */\r\nexport const gaugeLevels = Object.freeze([0, 100, 500, 3000, 10000, 30000, 60000, 100000, 150000, 250000])\r\n\r\n/**\r\n * 変動値から珠に変換する際の必要数\r\n */\r\nexport const gaugeToJuelLevels = Object.freeze([0, 100, 300, 500, 1500, 3000, 6000, 10000, 30000, 60000, 100000, 150000, 250000])\r\n\r\n/**\r\n * palamToJuelLevelsで指定された数に達したときに得られる珠の数\r\n */\r\nexport const gaugeToJuelAmounts = Object.freeze([0, 1, 2, 10, 20, 100, 200, 500, 1000, 2000, 3000, 5000, 8000])\r\n","\r\nimport { savedata, saveclass } from '../savedata'\r\nimport { CharacterReference } from '../character';\r\nimport { getTrainList } from './trainloader';\r\nimport { GaugeTable, Gauge, KeyOfGaugeTable } from '../characterstatus/gauge';\r\nimport { clamp } from '../util/clamp';\r\nimport { ExpTable } from '../characterstatus/exp';\r\nimport { StainTable } from '../characterstatus/stain';\r\nimport { tuple } from '../util/tuple';\r\nimport { expLevels, gaugeLevels, gaugeToJuelAmounts, gaugeToJuelLevels } from './constants';\r\nimport { TrainScene } from './trainmode';\r\nimport { Game } from '../game';\r\nimport { Event, AsyncEvent } from '../util/event';\r\n\r\nexport const initializeModule = new AsyncEvent()\r\n\r\n/**\r\n * こまかい便利関数\r\n */\r\nexport const 同性判定 = (c1: CharacterReference, c2: CharacterReference) => {\r\n    const c1v = c1.特性.Ｖ有り\r\n    const c2v = c2.特性.Ｖ有り\r\n    if (c1v && c2v)\r\n        return \"女\"\r\n    else if (!c1v && !c2v)\r\n        return \"男\"\r\n    else\r\n        return \"異性\"\r\n}\r\n\r\n/**\r\n * 調教要素を含むもの\r\n */\r\nexport const 調教行為実行判定 = (調教データ: Train, 対象: CharacterReference, 実行者: CharacterReference, array: [string, number][]) => {\r\n    const 項目追加 = (a: string, b: number) => {\r\n        if (b === 0) return\r\n        array.push([a, b])\r\n    }\r\n    \r\n    項目追加(`従順LV${対象.レベル.従順}`, 対象.レベル.従順 * 4)\r\n    項目追加(`マゾっ気LV${対象.レベル.マゾっ気}`, 対象.レベル.マゾっ気 * 2)\r\n    項目追加(`欲望LV${対象.レベル.欲望}`, 対象.レベル.欲望 * 3)\r\n    const 同性 = 同性判定(対象, 実行者)\r\n    if (同性 === \"女\") {\r\n        項目追加(`レズっ気LV${対象.レベル.レズっ気}`, 対象.レベル.レズっ気 * 3)\r\n        項目追加(`レズ中毒LV${対象.レベル.レズ中毒}`, 対象.レベル.レズ中毒 * 3)\r\n        項目追加(`両刀`, 対象.特性.両刀 ? 10 : 0)\r\n        項目追加(`好奇心`, 対象.特性.好奇心 ? 7 : 0)\r\n        項目追加(`保守的`, 対象.特性.保守的 ? -13 : 0)\r\n    }\r\n    else if (同性 === \"男\") {\r\n        項目追加(`ホモっ気LV${対象.レベル.ホモっ気}`, 対象.レベル.ホモっ気 * 3)\r\n        項目追加(`ゲイ中毒LV${対象.レベル.ゲイ中毒}`, 対象.レベル.ゲイ中毒 * 3)\r\n        項目追加(`両刀`, 対象.特性.両刀 ? 10 : 0)\r\n        項目追加(`好奇心`, 対象.特性.好奇心 ? 7 : 0)\r\n        項目追加(`保守的`, 対象.特性.保守的 ? -13 : 0)\r\n    }\r\n    else {\r\n        項目追加(`好奇心`, 対象.特性.好奇心 ? 5 : 0)\r\n        項目追加(`保守的`, 対象.特性.保守的 ? -10 : 0)\r\n    }\r\n\r\n    項目追加(`苦痛刻印LV${対象.レベル.苦痛刻印}`, 対象.レベル.苦痛刻印 * 5)\r\n\r\n    const プライド値 = 対象.特性.プライド高い ? 4 : (対象.特性.プライド低い ? 1 : 2)\r\n    項目追加(`反発刻印LV${対象.レベル.反発刻印}`, 対象.レベル.反発刻印 * -2 * プライド値)\r\n\r\n    const 恭順LV = clamp(getGaugeLevel(対象.変動.恭順.value), 0, 5)\r\n    項目追加(`恭順LV${恭順LV}`, 恭順LV * 3)\r\n\r\n    const 恐怖LV = clamp(getGaugeLevel(対象.変動.恐怖.value), 0, 5)\r\n    項目追加(`恐怖LV${恐怖LV}`, 恐怖LV * 3)\r\n\r\n    項目追加(`服従`, 対象.特性.服従 ? 10 : 0)\r\n    項目追加(`隷属`, 対象.特性.隷属 ? 20 : 0)\r\n    if (!対象.特性.服従) {\r\n        項目追加(`反抗的`, 対象.特性.反抗的 ? -5 : 0)\r\n    }\r\n    項目追加(`気丈`, 対象.特性.気丈 ? -5 : 0)\r\n    項目追加(`素直`, 対象.特性.素直 ? 5 : 0)\r\n    項目追加(`プライド高い`, 対象.特性.プライド高い ? -15 : 0)\r\n    項目追加(`プライド低い`, 対象.特性.プライド低い ? 5 : 0)\r\n    項目追加(`目立ちたがり`, 対象.特性.目立ちたがり ? 2 : 0)\r\n    項目追加(`抑圧`, 対象.特性.抑圧 ? -10 : 0)\r\n    項目追加(`抵抗`, 対象.特性.抵抗 ? -10 : 0)\r\n    項目追加(`弱味`, 対象.特性.弱味 ? 12 : 0)\r\n    項目追加(`即落ち`, 対象.特性.即落ち ? 10 : 0)\r\n    項目追加(`盲信`, 対象.特性.盲信 ? 8 : 0)\r\n\r\n    // 場合によっては名前を変えたいだろうから\r\n    const _調教者_ = \"調教者\"\r\n    項目追加(`${_調教者_}のサドっ気`, 実行者.レベル.サドっ気 * 2)\r\n    項目追加(`${_調教者_}の魅惑`, 実行者.特性.魅惑 ? 6 : 0)\r\n    項目追加(`${_調教者_}の謎の魅力`, 実行者.特性.謎の魅力 ? 8 : 0)\r\n    項目追加(`${_調教者_}のサド`, 実行者.特性.サド ? 3 : 0)\r\n    for (const c of 調教データ.players) {\r\n        if (c === 実行者) continue\r\n        項目追加(`${c.呼び名}の鼓舞`, 実行者.特性.鼓舞 ? 3 : 0)\r\n    }\r\n    const 酩酊LV = getGaugeLevel(対象.変動.酩酊.value)\r\n    項目追加(`酩酊LV${酩酊LV}`, 酩酊LV * 4)\r\n\r\n    const 関係 = 対象.関係取得(実行者)\r\n    if (関係) {\r\n        const idx = 相性計算(関係.相性)\r\n        const value = [-10, -6, -3, 0, 3, 6, 10][idx]\r\n        項目追加(相性呼び名[idx], value)\r\n    }\r\n}\r\n\r\nexport const 相性呼び名 = tuple(`相性最悪`, `相性悪い`, `相性いまいち`, `相性普通`, `相性ややよい`, `相性よい`, `相性最高`)\r\nexport const 相性計算 = (n: number) => {\r\n    if (n < -70) {\r\n        return 0\r\n    }\r\n    else if (n < -30) {\r\n        return 1\r\n    }\r\n    else if (n < 0) {\r\n        return 2\r\n    }\r\n    else if (n == 0) {\r\n        return 3\r\n    }\r\n    else if (n < 30) {\r\n        return 4\r\n    }\r\n    else if (n < 70) {\r\n        return 5\r\n    }\r\n    else {\r\n        return 6\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * GaugeTableの拡張\r\n */\r\ndeclare module '../characterstatus/gauge' {\r\n    interface GaugeTable {\r\n        勃起: Gauge\r\n        射精: Gauge\r\n        精力: Gauge\r\n        快Ｃ: Gauge\r\n        快Ｐ: Gauge\r\n        快Ｖ: Gauge\r\n        快Ａ: Gauge\r\n        快Ｂ: Gauge\r\n        快Ｍ: Gauge\r\n        潤滑: Gauge\r\n        恭順: Gauge\r\n        欲情: Gauge\r\n        屈服: Gauge\r\n        習得: Gauge\r\n        恥情: Gauge\r\n        苦痛: Gauge\r\n        恐怖: Gauge\r\n        憤慨: Gauge\r\n        不快: Gauge\r\n        抑鬱: Gauge\r\n        酩酊: Gauge\r\n    }\r\n}\r\nexport const KeyOfTrainGauge = tuple(\r\n    \"勃起\",\r\n    \"射精\",\r\n    \"精力\",\r\n    \"酩酊\",\r\n\r\n    \"快Ｃ\",\r\n    \"快Ｐ\",\r\n    \"快Ｖ\",\r\n    \"快Ａ\",\r\n    \"快Ｂ\",\r\n    \"快Ｍ\",\r\n    \"潤滑\",\r\n    \"恭順\",\r\n    \"欲情\",\r\n    \"屈服\",\r\n    \"習得\",\r\n    \"恥情\",\r\n    \"苦痛\",\r\n    \"恐怖\",\r\n    \"憤慨\",\r\n    \"不快\",\r\n    \"抑鬱\",\r\n)\r\ninitializeModule.addListener(async () => {\r\n    KeyOfGaugeTable.push(...KeyOfTrainGauge)\r\n    GaugeTable.extensionInitializer.push(o => {\r\n        for (const k of KeyOfTrainGauge) {\r\n            o[k] = new Gauge()\r\n        }\r\n    })\r\n})\r\n\r\n\r\n\r\n/**\r\n * 経験数の進行段階を得る\r\n */\r\nexport const getExpLevel = (n: number) => {\r\n    for (let i = 0; i < expLevels.length; i++) {\r\n        if (n <= expLevels[i])\r\n            return i\r\n    }\r\n    return gaugeLevels.length\r\n}\r\n\r\n/**\r\n * 変動値の進行段階を得る\r\n */\r\nexport const getGaugeLevel = (n: number) => {\r\n    for (let i = 0; i < gaugeLevels.length; i++) {\r\n        if (n <= gaugeLevels[i])\r\n            return i\r\n    }\r\n    return gaugeLevels.length\r\n}\r\n\r\n/**\r\n * 変動値から取得できるを珠を得る\r\n */\r\nexport const gaugeToJuel = (gaugeValue: number): number => {\r\n    for (let i = 0; i < gaugeToJuelLevels.length; i++) {\r\n        if (gaugeValue <= gaugeToJuelLevels[i])\r\n            return gaugeToJuelAmounts[i]\r\n    }\r\n    return (gaugeValue / 20) | 0\r\n}\r\n\r\n\r\n/**\r\n * 快楽系SOURCEの快楽系ABLによる補正 上昇値の倍率うｐに使う\r\n * 最小1倍 レベルで増幅型\r\n */\r\nconst sourceRev1 = (n: number): number => {\r\n    if (n < 0) {\r\n        return 1\r\n    }\r\n    else if (n >= 0 && n <= 5) {\r\n        return 1 + 0.7 * n\r\n    }\r\n    else if (n >= 6 && n <= 9) {\r\n        return 3 + 0.4 * n\r\n    }\r\n    else if (n >= 10 && n <= 15) {\r\n        return 4.5 + 0.2 * n\r\n    }\r\n    else if (n >= 16 && n <= 19) {\r\n        return 7 + 0.1 * n\r\n    }\r\n    else {\r\n        return 9\r\n    }\r\n}\r\n/**\r\n * 快楽系sourceに依存する欲望上昇の欲望レベルによる補正\r\n * 最大1倍 レベルで解放型\r\n */\r\nconst sourceRev2 = (n: number): number => {\r\n    if (n < 0) {\r\n        return 0.25\r\n    }\r\n    else if (n >= 0 && n <= 5) {\r\n        return 0.25 + 0.07 * n\r\n    }\r\n    else if (n >= 6 && n <= 9) {\r\n        return 0.45 + 0.03 * n\r\n    }\r\n    else if (n >= 10 && n <= 15) {\r\n        return 0.6 + 0.02 * n\r\n    }\r\n    else if (n >= 16 && n <= 19) {\r\n        return 0.8 + 0.01 * n\r\n    }\r\n    else {\r\n        return 1\r\n    }\r\n}\r\n/**\r\n * 普通はない性質を開放するタイプ\r\n * 最小0倍\r\n */\r\nconst sourceRev3 = (n: number): number => {\r\n    if (n < 0) {\r\n        return 0\r\n    }\r\n    else if (n >= 0 && n <= 5) {\r\n        return 0 + 0.7 * n\r\n    }\r\n    else if (n >= 6 && n <= 9) {\r\n        return 2.25 + 0.4 * n\r\n    }\r\n    else if (n >= 10 && n <= 15) {\r\n        return 4 + 0.2 * n\r\n    }\r\n    else if (n >= 16 && n <= 19) {\r\n        return 6.75 + 0.1 * n\r\n    }\r\n    else {\r\n        return 9\r\n    }\r\n}\r\nconst getTable = (n: number, tbl: number[]) => {\r\n    const idx = clamp(n, 0, tbl.length)\r\n    return tbl[idx]\r\n}\r\n\r\nexport const autoFixTrainSources = (train: TrainStatus) => {\r\n    train.補正済み対象者ソース = autoFixSources(train, train.対象者ソース, train.target)\r\n    train.補正済み実行者ソース = autoFixSources(train, train.実行者ソース, train.player)\r\n}\r\n\r\nconst getOpponent = <T>(train: TrainStatus, c: CharacterReference, defaultValue: T) => {\r\n    if (train.player === c)\r\n        return train.target\r\n    else if (train.target === c)\r\n        return train.player\r\n    return defaultValue\r\n}\r\n\r\n/** \r\n * 精神や感度によるソースの補正\r\n * 対象本人の印象に加工する\r\n */\r\nexport const autoFixSources = (train: TrainStatus, src: SourceTable, self: CharacterReference) => {\r\n    const v = new SourceTable()\r\n    for (const k of KeyOfSourceTable) {\r\n        v[k] = src[k]\r\n    }\r\n\r\n    const opponent = getOpponent(train, self, self)\r\n\r\n    if (train.commander === self) {\r\n        v.逸脱 = 0\r\n    }\r\n    else {\r\n        v.消耗 *= 2\r\n    }\r\n\r\n    if (opponent.特性.サド) {\r\n        const tbl8 = (n: number) => [0, 0.1, 0.2, 0.3, 0.45, 0.6, 0.75, 0.9, 1.2, 1.5][n] || (n / 2 - 2)\r\n        v.被虐 += src.苦痛 * (self.特性.小人 ? 0.75 : 1) * 1.5\r\n    }\r\n    if (opponent.レベル.サドっ気 > 0) {\r\n        const tbl10 = (n: number) => [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5][n] || (n / 2 + 2)\r\n\r\n        //v.被虐 += src.恐怖 * tbl10(target.レベル.従順) * \r\n\r\n    }\r\n\r\n    //commander === \r\n\r\n    const 潤滑LV = getGaugeLevel(self.変動.潤滑.value)\r\n    const 潤滑係数 = getTable(潤滑LV, [0.1, 0.3, 0.4, 0.75, 0.9, 1])\r\n\r\n    v.快Ｃ = src.快Ｃ * sourceRev1(self.レベル.Ｃ感覚)\r\n    {\r\n        const 快Ｖ経験 = getExpLevel(self.経験.Ｖ.快楽)\r\n        const 快Ｖ経験増幅 = getTable(快Ｖ経験, [0.3, 0.5, 0.8, 1, 1.2, 1.5])\r\n        v.快Ｖ = src.快Ｖ * sourceRev1(self.レベル.Ｖ感覚) * 快Ｖ経験増幅 * 潤滑係数\r\n    }\r\n    v.快Ｐ = src.快Ｐ * sourceRev1(self.レベル.Ｐ感覚)\r\n    v.快Ｂ = src.快Ｂ * sourceRev1(self.レベル.Ｂ感覚)\r\n    v.快Ａ = src.快Ａ * sourceRev1(self.レベル.Ａ感覚)\r\n    v.快Ｍ = src.快Ｍ * sourceRev1(self.レベル.Ｍ感覚)\r\n\r\n\r\n    const 苦痛増幅tbl = (n: number) => [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5][n] || (n / 2 + 2)\r\n    const 苦痛LV = clamp(getGaugeLevel(self.変動.苦痛.value), 0, 10)\r\n    v.苦痛 = v.苦痛 * 苦痛増幅tbl(苦痛LV)\r\n\r\n\r\n    const 関係 = self.関係取得(opponent)\r\n    if (関係) {\r\n        if (関係.親愛) {\r\n            v.屈従 *= 3\r\n            v.恭順 *= 3\r\n            v.親交 *= 3\r\n            v.情愛 *= 3\r\n            v.鬱屈 *= 0.3\r\n            v.恐怖 *= 0.3\r\n            v.逸脱 *= 0.3\r\n            v.不潔 *= 0.2\r\n        }\r\n        else if (関係.恋慕) {\r\n            v.屈従 *= 2\r\n            v.恭順 *= 2\r\n            v.親交 *= 2\r\n            v.情愛 *= 2\r\n            v.鬱屈 *= 0.5\r\n            v.恐怖 *= 0.5\r\n            v.逸脱 *= 0.5\r\n            v.不潔 *= 0.5\r\n        }\r\n\r\n        if (関係.娼婦) {\r\n            v.屈従 *= 1.5\r\n            v.恭順 *= 1.5\r\n            v.情愛 *= 1.5\r\n            v.性行動 *= 1.5\r\n            v.性的 *= 1.5\r\n            v.不潔 *= 0.6\r\n            v.鬱屈 *= 0.6\r\n            v.逸脱 *= 0.3\r\n        }\r\n        else if (関係.淫乱) {\r\n            v.屈従 *= 1.2\r\n            v.恭順 *= 1.2\r\n            v.情愛 *= 1.2\r\n            v.性行動 *= 1.2\r\n            v.性的 *= 1.2\r\n            v.不潔 *= 0.8\r\n            v.鬱屈 *= 0.8\r\n            v.逸脱 *= 0.4\r\n        }\r\n\r\n        if (関係.隷属) {\r\n            v.屈従 *= 5\r\n            v.恭順 *= 0.2\r\n            v.親交 *= 0.25\r\n            v.情愛 *= 0.25\r\n            v.恐怖 *= 3\r\n            v.逸脱 *= 0.25\r\n            v.鬱屈 *= 0.25\r\n            v.不潔 *= 0.25\r\n        }\r\n        else if (関係.服従) {\r\n            v.屈従 *= 3\r\n            v.恭順 *= 0.5\r\n            v.親交 *= 0.5\r\n            v.情愛 *= 0.5\r\n            v.恐怖 *= 1.5\r\n            v.逸脱 *= 0.5\r\n            v.鬱屈 *= 0.5\r\n            v.不潔 *= 0.5\r\n        }\r\n\r\n        if (関係.相性 !== 0) {\r\n            const R = clamp(1 - 関係.相性, 0.00001, 10000)\r\n            v.欲情 *= R\r\n            v.屈従 *= R\r\n            v.恥辱 *= R\r\n            v.情愛 *= R\r\n            v.親交 *= R\r\n            v.恭順 *= R\r\n\r\n            v.逸脱 /= R\r\n            v.鬱屈 /= R\r\n            v.不潔 /= R\r\n        }\r\n\r\n        if (self.変動.気力.value <= 0) {\r\n            const R = 0.7\r\n            v.欲情 *= R\r\n            v.屈従 *= R\r\n            v.恥辱 *= R\r\n            v.情愛 *= R\r\n            v.親交 *= R\r\n            v.恭順 *= R\r\n            v.恐怖 *= R\r\n            v.鬱屈 *= R\r\n            v.疲労 *= 1.5\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    return v\r\n}\r\n\r\n\r\n\r\n/**\r\n * ソースから変動値への変換\r\n */\r\nexport const sourceToGaugeChanges = (src: SourceTable, target: CharacterReference) => {\r\n    const v = new GaugeTable()\r\n\r\n    v.体力.value -= src.疲労\r\n    v.気力.value -= src.消耗\r\n\r\n    {\r\n        // 快Ｃ\r\n        const 欲情LV = getGaugeLevel(target.変動.欲情.value)\r\n        const 欲情増幅 = getTable(欲情LV, [0.8, 0.8, 0.8, 1, 1, 1.2, 1.2, 1.4, 1.4, 1.6])\r\n        v.快Ｃ.value += src.快Ｃ * 欲情増幅\r\n        v.欲情.value += src.快Ｃ * 欲情増幅 * sourceRev2(target.レベル.欲望)\r\n    }\r\n    {\r\n        // 快Ｂ\r\n        const 欲情LV = getGaugeLevel(target.変動.欲情.value)\r\n        const 欲情増幅 = getTable(欲情LV, [0.8, 0.8, 0.8, 1, 1, 1.2, 1.2, 1.4, 1.4, 1.6])\r\n        v.快Ｂ.value += src.快Ｂ * 欲情増幅\r\n        v.欲情.value += src.快Ｂ * 欲情増幅 * sourceRev2(target.レベル.欲望)\r\n    }\r\n    {\r\n        // 快Ｐ\r\n        const 欲情LV = getGaugeLevel(target.変動.欲情.value)\r\n        const 欲情増幅 = getTable(欲情LV, [0.8, 0.8, 0.8, 1, 1, 1.2, 1.2, 1.4, 1.4, 1.6])\r\n        const val = src.快Ｐ * 欲情増幅\r\n        v.快Ｐ.value += val\r\n        v.欲情.value += val * sourceRev2(target.レベル.欲望)\r\n        v.射精.value += val * sourceRev2(target.レベル.欲望)\r\n    }\r\n    {\r\n        // 快Ｖ\r\n        const 欲情 = getGaugeLevel(target.変動.欲情.value)\r\n        const 欲情増幅 = getTable(欲情, [0.6, 0.6, 0.8, 0.8, 1, 1, 1.2, 1.2, 1.5])\r\n        const 補正1 = target.特性.小人 ? 0.8 : 1\r\n        const 補正2 = target.特性.小人 ? 1.2 : 1\r\n        v.快Ｖ.value += src.快Ｖ * 欲情増幅 * 補正1\r\n        v.欲情.value += src.快Ｖ * sourceRev2(target.レベル.欲望) * 補正2\r\n    }\r\n    {\r\n        // 快Ａ\r\n        const 欲情 = getGaugeLevel(target.変動.欲情.value)\r\n        const 欲情増幅 = getTable(欲情, [0.6, 0.6, 0.8, 0.8, 1, 1, 1.2, 1.2, 1.5])\r\n        const 補正1 = target.特性.小人 ? 0.8 : 1\r\n        const 補正2 = target.特性.小人 ? 1.2 : 1\r\n        v.快Ａ.value += src.快Ａ * 欲情増幅 * 補正1\r\n        v.欲情.value += src.快Ａ * sourceRev2(target.レベル.欲望) * 補正2\r\n    }\r\n    {\r\n        // 快Ｍ\r\n        const 欲情LV = getGaugeLevel(target.変動.欲情.value)\r\n        const 欲情増幅 = getTable(欲情LV, [0.8, 0.8, 0.8, 1, 1, 1.2, 1.2, 1.4, 1.4, 1.6])\r\n        v.快Ｍ.value += src.快Ｍ * 欲情増幅\r\n        v.欲情.value += src.快Ｍ * 欲情増幅 * sourceRev2(target.レベル.欲望)\r\n    }\r\n\r\n    //情愛\r\n    const tbl1 = (n: number) => [0.1, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 5][n] || (n / 2 + 1)\r\n    v.恭順.value += src.情愛 * tbl1(target.レベル.従順)\r\n    const tbl2 = (n: number) => [0.1, 0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6][n] || (n / 2 - 1)\r\n    v.欲情.value += src.情愛 * tbl2(target.レベル.欲望)\r\n\r\n    //性行動\r\n    const tbl3 = (n: number) => [0.6, 1.2, 1.8, 2.4, 3, 3.6, 4.2, 4.8, 5.4, 6][n] || (n / 2 + 2)\r\n    const tbl4 = (n: number) => [0.6, 0.8, 1, 1.2, 1.4, 1.7, 2, 2.4, 2.8, 4][n] || (n / 2)\r\n    v.習得.value += src.性行動 * tbl3(target.レベル.技巧) * tbl4(target.レベル.奉仕精神)\r\n\r\n    //達成\r\n    const tbl5 = (n: number) => [0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5][n] || (n / 2 + 1)\r\n    const tbl6 = (n: number) => [0.1, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5][n] || (n / 2 + 1)\r\n    v.恭順.value += src.達成 * tbl5(target.レベル.従順) * tbl6(target.レベル.奉仕精神)\r\n\r\n    //苦痛\r\n    const hpRatio = target.変動.体力.value / target.変動.体力.max\r\n    const hpLevel = clamp(Math.floor(hpRatio * 10), 0, 10)\r\n    const tbl7 = (n: number) => [2.5, 2.5, 2.5, 2.5, 2.2, 2, 1.8, 1.6, 1.4, 1.2, 1][clamp(n, 0, 10)]\r\n    const tbl8 = (n: number) => [0, 0.1, 0.2, 0.3, 0.45, 0.6, 0.75, 0.9, 1.2, 1.5][n] || (n / 2 - 2)\r\n    const tbl9 = (n: number) => [1, 1.2, 1.5, 2][n] || 1\r\n    v.苦痛.value += src.苦痛 * tbl7(hpLevel) * (target.特性.小人 ? 2 : 1) * (target.特性.痛みに弱い ? 1.5 : 1)\r\n    v.欲情.value += src.苦痛 * tbl8(target.レベル.マゾっ気) * (target.特性.小人 ? 0.75 : 1)\r\n    v.恐怖.value += src.苦痛 * tbl9(target.レベル.苦痛刻印) * (target.特性.臆病 ? 2 : 1)\r\n\r\n    //被虐\r\n    v.欲情.value += src.被虐 * tbl8(target.レベル.マゾっ気)\r\n\r\n    //恐怖\r\n    const tbl10 = (n: number) => [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5][n] || (n / 2 + 2)\r\n    v.恐怖.value += src.恐怖 * tbl10(target.レベル.従順)\r\n    v.屈服.value += src.恐怖\r\n    //v.憤慨.value += src.逸脱\r\n\r\n    //中毒\r\n    const tbl11 = (n: number) => [0.4, 0.6, 0.8, 1, 1.2, 1.4, 1.6, 1.8, 2, 2.2][n] || (n / 4 + 0.5)\r\n    const tbl12 = (n: number) => [0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7, 1.9, 2.1, 2.3][n] || (n / 4 + 0.5)\r\n    v.恭順.value += src.中毒 * tbl11(target.レベル.欲望)\r\n    v.欲情.value += src.中毒 * tbl12(target.レベル.欲望)\r\n\r\n    //欲情\r\n    v.欲情.value += src.欲情 * tbl2(target.レベル.欲望)\r\n\r\n    //恭順\r\n    const tbl13 = (n: number) => [0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4][n] || (n / 2 + 1)\r\n    const tbl14 = (n: number) => [1, 1.3, 1.6, 1.9, 2.2, 2.5, 2.8, 3.1, 3.4, 3.7][n] || (n / 2 + 1)\r\n    v.恭順.value += src.恭順 * tbl13(target.レベル.従順) * tbl14(target.レベル.欲望)\r\n\r\n    //露出\r\n    const tbl15 = (n: number) => [0, 0.1, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4, 1.6][n] || 1\r\n    const tbl16 = (n: number) => [1, 0.9, 0.8, 0.7, 0.6][n] || 1\r\n    const 恥情LV = getGaugeLevel(target.変動.恥情.value)\r\n    v.欲情.value += src.露出 * tbl15(target.レベル.露出癖)\r\n    v.恥情.value += src.露出 * tbl16(恥情LV)\r\n    v.屈服.value += src.露出 * tbl16(恥情LV) * 0.1\r\n\r\n    //屈従\r\n    const tbl17 = (n: number) => [0.5, 1, 1.5, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6][n] || 1\r\n    v.屈服.value += src.屈従 * tbl17(target.レベル.従順) * tbl17(target.レベル.奉仕精神)\r\n\r\n    //不潔\r\n    const tbl18 = (n: number) => [1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0][n] || 1\r\n    const 汚れ係数 = (target.特性.汚れ無視 ? 0.5 : 1) * (target.特性.潔癖症 ? 2 : 1)\r\n    v.不快.value += src.不潔 * tbl18(target.レベル.従順) * 汚れ係数\r\n\r\n    //鬱屈\r\n    const tbl19 = (n: number) => [1, 0.8, 0.6, 0.4, 0.3, 0.2, 0.1, 0.08, 0.06, 0.04, 0][n] || 1\r\n    v.抑鬱.value += src.鬱屈 * tbl19(target.レベル.従順) * tbl19(target.レベル.欲望)\r\n\r\n    //逸脱\r\n    const 逸脱係数 = (target.特性.好奇心 ? 0.8 : 1) * (target.特性.保守的 ? 2 : 1)\r\n    const tbl20 = (n: number) => [1, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5][n] || 1\r\n    v.憤慨.value += src.逸脱 * 逸脱係数 * tbl19(target.レベル.従順) * tbl20(target.レベル.マゾっ気)\r\n\r\n    return v\r\n}\r\n\r\n\r\nconst applyGaugeTable = (applyTo: GaugeTable, value: GaugeTable) => {\r\n    const keys = tuple(\r\n        \"体力\",\r\n        \"気力\",\r\n        ...KeyOfTrainGauge\r\n    )\r\n    for (const k of keys) {\r\n        const g = applyTo[k]\r\n        g.value = clamp(g.value + value[k].value, g.min, g.max)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const KeyOfTrainContextAttribute = tuple(\"無自覚\")\r\nexport type TrainContextAttribute = typeof KeyOfTrainContextAttribute[number]\r\n\r\nexport class Train {\r\n    previousTrain: TrainDef | undefined\r\n    players: CharacterReference[] = []\r\n    targets: CharacterReference[] = []\r\n    exitTrain = false\r\n    attributes = new Attributes<TrainContextAttribute>()\r\n\r\n    async doTrain() {\r\n        await this.prepareTrain()\r\n        while (await this.stepTrain()) { }\r\n        await this.finishTrain()\r\n    }\r\n\r\n    private async prepareTrain() {\r\n    }\r\n    private async stepTrain() {\r\n        const trains = await getTrainList()\r\n\r\n        return this.exitTrain\r\n    }\r\n    private async finishTrain() {\r\n    }\r\n\r\n    playersName() {\r\n        if (this.players.length === 0)\r\n            return \"<誰もいない>\"\r\n        else if (this.players.length > 1)\r\n            return `${this.players[0].呼び名}達`\r\n        else\r\n            return `${this.players[0].呼び名}`\r\n    }\r\n    targetsName() {\r\n        if (this.targets.length === 0)\r\n            return \"<誰もいない>\"\r\n        else if (this.targets.length > 1)\r\n            return `${this.targets[0].呼び名}達`\r\n        else\r\n            return `${this.targets[0].呼び名}`\r\n    }\r\n}\r\n/*\r\nexport class TrainCharacterContextList {\r\n    leader: CharacterReference | undefined = undefined\r\n    contexts: TrainCharacterContext[] = []\r\n\r\n    呼び名() {\r\n        if (this.leader === undefined)\r\n            return \"<undefined>\"\r\n        if (this.contexts.length > 1)\r\n            return `${this.leader.呼び名}達`\r\n        else\r\n            return `${this.leader.呼び名}`\r\n    }\r\n}\r\nexport interface TrainCharacterContext {\r\n    player: CharacterReference\r\n    target: CharacterReference\r\n    source: SourceTable\r\n}\r\n*/\r\n\r\n@saveclass(\"trainstatus\")\r\nexport class TrainStatus {\r\n    constructor(target: CharacterReference, player: CharacterReference, commander: CharacterReference) {\r\n        this.player = player\r\n        this.target = target\r\n        this.commander = commander\r\n    }\r\n\r\n    commander: CharacterReference\r\n    命令者ソース = new SourceTable()\r\n    補正済み命令者ソース = new SourceTable()\r\n    commanderExp = new ExpTable()\r\n    commanderStain = new StainTable()\r\n\r\n    target: CharacterReference\r\n    対象者ソース = new SourceTable()\r\n    補正済み対象者ソース = new SourceTable()\r\n    targetExp = new ExpTable()\r\n    targetStain = new StainTable()\r\n\r\n    player: CharacterReference\r\n    実行者ソース = new SourceTable()\r\n    補正済み実行者ソース = new SourceTable()\r\n    playerExp = new ExpTable()\r\n    playerStain = new StainTable()\r\n\r\n    attributes = new Attributes<TrainAttribute>()\r\n    bodyTouch = new TouchStatus()\r\n\r\n    属性追加(name: TrainAttribute) {\r\n        this.attributes.add(name)\r\n    }\r\n    接触追加(c1: CharacterReference, p1: TouchPart, c2: CharacterReference, p2: TouchPart) {\r\n        this.bodyTouch.set(c1, p1, c2, p2)\r\n    }\r\n}\r\n\r\n\r\nexport const KeyOfTouchPart = tuple(\"Ａ\", \"Ｖ\", \"Ｂ\", \"Ｍ\", \"Ｐ\", \"Ｃ\", \"手\", \"腋\", \"顔\", \"髪\", \"腹\", \"太もも\", \"割れ目\", \"尻\", \"子宮内\")\r\nexport type TouchPart = typeof KeyOfTouchPart[number]\r\n\r\n/**\r\n * 体の触れ合いを示す。\r\n * 触れた部位同士を記憶し、一括して返す。\r\n * \r\n * 主に汚れシステム\r\n * 射精したときにがＰが触れている場所が精液に塗れたり、キスすると口同士で汚れが移るなどに使われる\r\n */\r\nexport class TouchStatus {\r\n    data: [CharacterReference, TouchPart, CharacterReference, TouchPart][] = []\r\n\r\n    set(c1: CharacterReference, c1part: TouchPart, c2: CharacterReference, c2part: TouchPart) {\r\n        this.data.push([c1, c1part, c2, c2part])\r\n    }\r\n\r\n    getList(c: CharacterReference, part: TouchPart) {\r\n        const ret: [CharacterReference, TouchPart][] = []\r\n        for (const [c1, c1part, c2, c2part] of this.data) {\r\n            if (c1 === c && c1part === part) {\r\n                ret.push([c2, c2part])\r\n            }\r\n            if (c2 === c && c2part === part) {\r\n                ret.push([c1, c1part])\r\n            }\r\n        }\r\n        return ret\r\n    }\r\n\r\n    isTouchedBoth(pc1: CharacterReference, pc1part: TouchPart, pc2: CharacterReference, pc2part: TouchPart) {\r\n        for (const [c1, c1part, c2, c2part] of this.data) {\r\n            if ((c1 === pc1 && c1part === pc1part && c2 === pc2 && c2part === pc2part) ||\r\n                (c1 === pc2 && c1part === pc2part && c2 === pc1 && c2part === pc1part)) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    isTouched(c: CharacterReference, cpart: TouchPart) {\r\n        for (const [c1, c1part, c2, c2part] of this.data) {\r\n            if ((c1 === c && c1part === cpart) || (c2 === c && c2part === cpart)) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n}\r\n\r\n\r\nexport const KeyOfSourceTable = tuple(\r\n    \"疲労\",\r\n    \"消耗\",\r\n    \"快Ｃ\",\r\n    \"快Ｐ\",\r\n    \"快Ｖ\",\r\n    \"快Ａ\",\r\n    \"快Ｂ\",\r\n    \"快Ｍ\",\r\n    \"快Ｕ\",\r\n    \"液体\",\r\n    \"情愛\",\r\n    \"性行動\",\r\n    \"達成\",\r\n    \"苦痛\",\r\n    \"被虐\",\r\n    \"恐怖\",\r\n    \"欲情\",\r\n    \"恭順\",\r\n    \"露出\",\r\n    \"屈従\",\r\n    \"歓楽\",\r\n    \"征服\",\r\n    \"受動\",\r\n    \"性的\",\r\n    \"不潔\",\r\n    \"鬱屈\",\r\n    \"逸脱\",\r\n    \"誘惑\",\r\n    \"恥辱\",\r\n    \"挑発\",\r\n    \"奉仕\",\r\n    \"強要\",\r\n    \"加虐\",\r\n\r\n    \"親交\",\r\n)\r\nexport type SourceType = typeof KeyOfSourceTable[number]\r\n@saveclass(\"sourcetable\")\r\nexport class SourceTable {\r\n    @savedata 疲労 = 0\r\n    @savedata 消耗 = 0\r\n\r\n    @savedata 快Ｃ = 0\r\n    @savedata 快Ｐ = 0\r\n    @savedata 快Ｖ = 0\r\n    @savedata 快Ａ = 0\r\n    @savedata 快Ｂ = 0\r\n    @savedata 快Ｍ = 0\r\n    @savedata 快Ｕ = 0\r\n\r\n    @savedata 液体 = 0\r\n    @savedata 情愛 = 0\r\n    @savedata 性行動 = 0\r\n    @savedata 達成 = 0\r\n    @savedata 苦痛 = 0\r\n    @savedata 被虐 = 0\r\n    @savedata 恐怖 = 0\r\n    @savedata 欲情 = 0\r\n    @savedata 恭順 = 0\r\n    @savedata 露出 = 0\r\n    @savedata 屈従 = 0\r\n    @savedata 歓楽 = 0\r\n    @savedata 征服 = 0\r\n    @savedata 受動 = 0\r\n    @savedata 性的 = 0\r\n\r\n    @savedata 不潔 = 0\r\n    @savedata 鬱屈 = 0\r\n    @savedata 逸脱 = 0\r\n\r\n    @savedata 誘惑 = 0\r\n    @savedata 恥辱 = 0\r\n    @savedata 挑発 = 0\r\n    @savedata 奉仕 = 0\r\n    @savedata 強要 = 0\r\n    @savedata 加虐 = 0\r\n\r\n\r\n    @savedata 中毒 = 0\r\n\r\n    @savedata 親交 = 0\r\n\r\n}\r\n\r\n\r\nexport class Attributes<T> {\r\n    private container = new Set<T>()\r\n\r\n    add(...names: T[]) {\r\n        for (const n of names) {\r\n            this.container.add(n)\r\n        }\r\n    }\r\n    has(name: T) {\r\n        return this.container.has(name)\r\n    }\r\n\r\n    values() {\r\n        return [...this.container.keys()]\r\n    }\r\n}\r\n\r\nexport const KeyOfTrainAttribute = tuple(\r\n    \"調教\", \"エロ\",\r\n    \"Ａ\", \"Ｖ\", \"Ｂ\", \"Ｍ\", \"Ｐ\", \"Ｃ\",\r\n    \"性交\", \"キス\", \"妊娠\", \"前戯\", \"愛撫\",\r\n    \"日常\", \"会話\")\r\nexport type TrainAttribute = typeof KeyOfTrainAttribute[number]\r\n\r\nexport class TrainDef {\r\n    ID = -1\r\n    名前 = \"＜未設定＞\"\r\n    属性 = new Attributes<TrainAttribute>()\r\n    発動条件 = (train: Train, target: CharacterReference, player: CharacterReference, commander: CharacterReference) => true\r\n    許容判定 = (train: Train, target: CharacterReference, player: CharacterReference, commander: CharacterReference, array: [string, number][]) => { array.push([\"未設定\", 100]) }\r\n    内容取得 = (train: Train, target: CharacterReference, player: CharacterReference, commander: CharacterReference): TrainStatus => new TrainStatus(target, player, commander)\r\n}\r\n","/**\r\n * 親交行動ＬＶ１\r\n */\r\nimport { TrainDef, Train, SourceTable, TrainStatus, 同性判定, getGaugeLevel, 調教行為実行判定 } from \"../train\";\r\n\r\nconst train = new TrainDef()\r\nexport default train\r\n\r\ntrain.ID = 101\r\ntrain.名前 = \"会話\"\r\ntrain.属性.add(\"日常\", \"会話\")\r\n\r\ntrain.発動条件 = (ctx, target, player, commander) => {\r\n    return true\r\n}\r\n\r\ntrain.許容判定 = (ctx, target, player, commander, array) => {\r\n    array.push([train.名前, 5])\r\n    調教行為実行判定(ctx, target, player, array)\r\n}\r\n\r\ntrain.内容取得 = (文脈, 対象, 実行者, 命令者) => {\r\n    const 内容 = new TrainStatus(対象, 実行者, 命令者)\r\n    const キスあり = false\r\n\r\n    内容.命令者ソース.疲労 = 5\r\n    内容.命令者ソース.消耗 = 5\r\n    内容.命令者ソース.征服 = 10\r\n\r\n    内容.実行者ソース.疲労 = 5\r\n    内容.実行者ソース.消耗 = 20\r\n    内容.実行者ソース.情愛 = 50\r\n    内容.実行者ソース.親交 = 100\r\n\r\n    内容.対象者ソース.疲労 = 5\r\n    内容.対象者ソース.消耗 = 20\r\n    内容.対象者ソース.情愛 = 50\r\n    内容.対象者ソース.親交 = 100\r\n\r\n    return 内容\r\n}\r\n","/**\r\n * 親交行動ＬＶ２\r\n */\r\nimport { TrainDef, Train, SourceTable, TrainStatus, 同性判定, getGaugeLevel, 調教行為実行判定 } from \"../train\";\r\n\r\nconst train = new TrainDef()\r\nexport default train\r\n\r\ntrain.ID = 102\r\ntrain.名前 = \"スキンシップ\"\r\ntrain.属性.add(\"日常\")\r\n\r\ntrain.発動条件 = (ctx, target, player, commander) => {\r\n    return true\r\n}\r\n\r\ntrain.許容判定 = (ctx, target, player, commander, array) => {\r\n    array.push([train.名前, 5])\r\n    調教行為実行判定(ctx, target, player, array)\r\n}\r\n\r\ntrain.内容取得 = (文脈, 対象, 実行者, 命令者) => {\r\n    const 内容 = new TrainStatus(対象, 実行者, 命令者)\r\n    const キスあり = false\r\n\r\n    内容.命令者ソース.疲労 = 5\r\n    内容.命令者ソース.消耗 = 5\r\n    内容.命令者ソース.征服 = 30\r\n\r\n    内容.実行者ソース.疲労 = 20\r\n    内容.実行者ソース.消耗 = 25\r\n    内容.実行者ソース.情愛 = 100\r\n    内容.実行者ソース.性行動 = 50\r\n    内容.実行者ソース.達成 = 100\r\n    内容.実行者ソース.親交 = 100\r\n    //うっかりさん\r\n    if (実行者.特性.Ｐ有り && Math.random() > 0.75) {\r\n        内容.実行者ソース.快Ｐ = 50\r\n        内容.実行者ソース.性的 += 20\r\n        内容.実行者ソース.露出 += 20\r\n    }\r\n    //うっかりさん2\r\n    if (実行者.特性.Ｂ有り && Math.random() > 0.5) {\r\n        内容.実行者ソース.快Ｂ = 50\r\n        内容.実行者ソース.性的 += 20\r\n        内容.実行者ソース.露出 += 20\r\n    }\r\n\r\n    内容.対象者ソース.疲労 = 25\r\n    内容.対象者ソース.消耗 = 20\r\n    内容.対象者ソース.情愛 = 150\r\n    内容.対象者ソース.性行動 = 50\r\n    内容.対象者ソース.達成 = 100\r\n    内容.対象者ソース.親交 = 100\r\n    //逆うっかりさん\r\n    if (対象.特性.Ｐ有り && Math.random() > 0.75) {\r\n        内容.対象者ソース.快Ｐ = 50\r\n        内容.対象者ソース.性的 += 20\r\n        内容.対象者ソース.露出 += 20\r\n    }\r\n    //逆うっかりさん2\r\n    if (対象.特性.Ｂ有り && Math.random() > 0.5) {\r\n        内容.対象者ソース.快Ｂ = 50\r\n        内容.対象者ソース.性的 += 20\r\n        内容.対象者ソース.露出 += 20\r\n    }\r\n\r\n    return 内容\r\n}\r\n","/**\r\n * エロＬＶ１\r\n */\r\nimport { TrainDef, Train, SourceTable, TrainStatus, 同性判定, getGaugeLevel, 調教行為実行判定 } from \"../train\";\r\n\r\nconst train = new TrainDef()\r\nexport default train\r\n\r\ntrain.ID = 1\r\ntrain.名前 = \"愛撫\"\r\ntrain.属性.add(\"エロ\", \"Ｃ\", \"Ｂ\", \"愛撫\", \"前戯\")\r\n\r\ntrain.発動条件 = (ctx, target, player, commander) => {\r\n    return true\r\n}\r\n\r\ntrain.許容判定 = (ctx, target, player, commander, array) => {\r\n    array.push([train.名前, -20])\r\n    調教行為実行判定(ctx, target, player, array)\r\n}\r\n\r\ntrain.内容取得 = (文脈, 対象, 実行者, 命令者) => {\r\n    const 内容 = new TrainStatus(対象, 実行者, 命令者)\r\n    const キスあり = false\r\n\r\n    内容.命令者ソース.疲労 = 5\r\n    内容.命令者ソース.消耗 = 5\r\n    内容.命令者ソース.征服 = 30\r\n\r\n    内容.実行者ソース.疲労 = 20\r\n    内容.実行者ソース.消耗 = 20\r\n    内容.実行者ソース.性行動 = 30\r\n    内容.実行者ソース.達成 = 30\r\n    内容.実行者ソース.奉仕 = 30\r\n    内容.実行者ソース.不潔 = 30\r\n    内容.実行者ソース.逸脱 = 20\r\n    内容.実行者ソース.性的 = 30\r\n\r\n    内容.対象者ソース.疲労 = 20\r\n    内容.対象者ソース.消耗 = 20\r\n    内容.接触追加(対象, \"手\", 実行者, \"手\")\r\n    if (対象.特性.Ｃ有り) {\r\n        内容.対象者ソース.快Ｃ = 30\r\n        内容.接触追加(対象, \"Ｃ\", 実行者, \"手\")\r\n    }\r\n    if (対象.特性.Ｐ有り) {\r\n        内容.対象者ソース.快Ｐ = 30\r\n        内容.接触追加(対象, \"Ｐ\", 実行者, \"手\")\r\n    }\r\n    if (対象.特性.Ｂ有り) {\r\n        内容.対象者ソース.快Ｂ = 30\r\n        内容.接触追加(対象, \"Ｂ\", 実行者, \"手\")\r\n    }\r\n    内容.対象者ソース.情愛 = 30\r\n    内容.対象者ソース.性行動 = 30\r\n    内容.対象者ソース.露出 = 30\r\n    内容.対象者ソース.逸脱 = 20\r\n    内容.対象者ソース.受動 = 20\r\n    内容.対象者ソース.性的 = 20\r\n\r\n    if (キスあり) {\r\n        内容.属性追加(\"キス\")\r\n\r\n        内容.実行者ソース.不潔 += 20\r\n        内容.実行者ソース.快Ｍ = 20\r\n\r\n        内容.対象者ソース.不潔 += 20\r\n        内容.対象者ソース.快Ｍ = 20\r\n        内容.接触追加(対象, \"Ｍ\", 実行者, \"Ｍ\")\r\n    }\r\n\r\n    return 内容\r\n}\r\n","import { CharacterReference } from \"../character\";\r\n\r\n\r\n/**\r\n * 係数\r\n */\r\nexport const 舌使い = (c: CharacterReference) => {\r\n    return 1\r\n}\r\nexport const 指使い = (c: CharacterReference) => {\r\n    return 1\r\n}\r\n\r\n","/**\r\n * ＣエロＬＶ１\r\n */\r\nimport { TrainDef, Train, SourceTable, TrainStatus, 同性判定, getGaugeLevel, 調教行為実行判定 } from \"../train\";\r\nimport { 舌使い } from '../traintraitcalc'\r\n\r\nconst train = new TrainDef()\r\nexport default train\r\n\r\ntrain.ID = 2\r\ntrain.名前 = \"クンニ\"\r\ntrain.属性.add(\"エロ\", \"Ｃ\", \"愛撫\", \"前戯\")\r\n\r\ntrain.発動条件 = (ctx, target, player, commander) => {\r\n    return target.特性.Ｃ有り\r\n}\r\n\r\ntrain.許容判定 = (ctx, target, player, commander, array) => {\r\n    array.push([train.名前, -25])\r\n    調教行為実行判定(ctx, target, player, array)\r\n}\r\n\r\ntrain.内容取得 = (文脈, 対象, 実行者, 命令者) => {\r\n    const 内容 = new TrainStatus(対象, 実行者, 命令者)\r\n\r\n    内容.命令者ソース.疲労 = 5\r\n    内容.命令者ソース.消耗 = 5\r\n    内容.命令者ソース.征服 = 30\r\n\r\n    内容.実行者ソース.疲労 = 25\r\n    内容.実行者ソース.消耗 = 20\r\n    内容.実行者ソース.性行動 = 40\r\n    内容.実行者ソース.達成 = 40\r\n    内容.実行者ソース.奉仕 = 40\r\n    内容.実行者ソース.不潔 = 40\r\n    内容.実行者ソース.逸脱 = 30\r\n    内容.実行者ソース.性的 = 40\r\n\r\n    内容.対象者ソース.疲労 = 20\r\n    内容.対象者ソース.消耗 = 20\r\n    内容.対象者ソース.快Ｃ = 80 * 舌使い(実行者)\r\n    内容.接触追加(対象, \"Ｃ\", 実行者, \"Ｍ\")\r\n    内容.対象者ソース.液体 = 40\r\n    内容.対象者ソース.露出 = 40\r\n    内容.対象者ソース.逸脱 = 30\r\n    内容.対象者ソース.受動 = 20\r\n    \r\n    内容.対象者ソース.性的 = 30\r\n\r\n    return 内容\r\n}\r\n","/**\r\n * ＶエロＬＶ１\r\n */\r\nimport { TrainDef, Train, SourceTable, TrainStatus, 同性判定, getGaugeLevel, 調教行為実行判定 } from \"../train\";\r\n\r\nconst train = new TrainDef()\r\nexport default train\r\n\r\ntrain.ID = 10\r\ntrain.名前 = \"指挿れ\"\r\ntrain.属性.add(\"エロ\", \"Ｖ\", \"愛撫\", \"前戯\")\r\n\r\ntrain.発動条件 = (ctx, target, player, commander) => {\r\n    return target.特性.Ｖ有り\r\n}\r\n\r\ntrain.許容判定 = (ctx, target, player, commander, array) => {\r\n    array.push([train.名前, -25])\r\n    調教行為実行判定(ctx, target, player, array)\r\n}\r\n\r\ntrain.内容取得 = (文脈, 対象, 実行者, 命令者) => {\r\n    const 内容 = new TrainStatus(対象, 実行者, 命令者)\r\n\r\n    内容.命令者ソース.疲労 = 5\r\n    内容.命令者ソース.消耗 = 5\r\n    内容.命令者ソース.征服 = 30\r\n\r\n    内容.実行者ソース.疲労 = 30\r\n    内容.実行者ソース.消耗 = 20\r\n    内容.実行者ソース.性行動 = 40\r\n    内容.実行者ソース.達成 = 40\r\n    内容.実行者ソース.奉仕 = 40\r\n    内容.実行者ソース.不潔 = 40\r\n    内容.実行者ソース.逸脱 = 30\r\n    内容.実行者ソース.性的 = 40\r\n\r\n    内容.対象者ソース.疲労 = 20\r\n    内容.対象者ソース.消耗 = 30\r\n    内容.対象者ソース.快Ｖ = 50\r\n    内容.接触追加(対象, \"Ｖ\", 実行者, \"手\")\r\n    内容.対象者ソース.露出 = 40\r\n    内容.対象者ソース.逸脱 = 30\r\n    内容.対象者ソース.受動 = 20\r\n    内容.対象者ソース.性的 = 30\r\n\r\n    return 内容\r\n}\r\n","/**\r\n * ＢエロＬＶ１\r\n */\r\nimport { TrainDef, Train, SourceTable, TrainStatus, 同性判定, getGaugeLevel, 調教行為実行判定 } from \"../train\";\r\n\r\nconst train = new TrainDef()\r\nexport default train\r\n\r\ntrain.ID = 3\r\ntrain.名前 = \"胸揉み\"\r\ntrain.属性.add(\"エロ\", \"Ｂ\", \"愛撫\", \"前戯\")\r\n\r\ntrain.発動条件 = (ctx, target, player, commander) => {\r\n    return target && target.特性.Ｂ有り\r\n}\r\n\r\ntrain.許容判定 = (ctx, target, player, commander, array) => {\r\n    array.push([train.名前, -15])\r\n    調教行為実行判定(ctx, target, player, array)\r\n}\r\n\r\ntrain.内容取得 = (文脈, 対象, 実行者, 命令者) => {\r\n    const 内容 = new TrainStatus(対象, 実行者, 命令者)\r\n\r\n    内容.命令者ソース.疲労 = 5\r\n    内容.命令者ソース.消耗 = 5\r\n    内容.命令者ソース.征服 = 30\r\n\r\n    内容.実行者ソース.疲労 = 25\r\n    内容.実行者ソース.消耗 = 20\r\n    内容.実行者ソース.性行動 = 40\r\n    内容.実行者ソース.征服 = 30\r\n    内容.実行者ソース.達成 = 40\r\n    内容.実行者ソース.奉仕 = 40\r\n    内容.実行者ソース.逸脱 = 30\r\n    内容.実行者ソース.性的 = 40\r\n\r\n    内容.対象者ソース.疲労 = 20\r\n    内容.対象者ソース.消耗 = 20\r\n    if (対象.特性.Ｂ有り) {\r\n        内容.対象者ソース.快Ｂ = 80\r\n        内容.接触追加(対象, \"Ｂ\", 実行者, \"手\")\r\n    }\r\n    内容.対象者ソース.露出 = 40\r\n    内容.対象者ソース.逸脱 = 30\r\n    内容.対象者ソース.受動 = 20\r\n    内容.対象者ソース.性的 = 30\r\n\r\n    return 内容\r\n}\r\n","/**\r\n * ＶエロＬＶ２\r\n */\r\nimport { TrainDef, Train, SourceTable, TrainStatus, 同性判定, getGaugeLevel, 調教行為実行判定 } from \"../train\";\r\n\r\nconst train = new TrainDef()\r\nexport default train\r\n\r\ntrain.ID = 11\r\ntrain.名前 = \"正常位\"\r\ntrain.属性.add(\"エロ\", \"Ｖ\", \"性交\", \"妊娠\")\r\n\r\ntrain.発動条件 = (ctx, target, player, commander) => {\r\n    if (!player.特性.Ｐ有り)\r\n        return false\r\n    if (!target.特性.Ｖ有り)\r\n        return false\r\n    return true\r\n}\r\n\r\ntrain.許容判定 = (ctx, target, player, commander, array) => {\r\n    array.push([train.名前, -55])\r\n    調教行為実行判定(ctx, target, player, array)\r\n}\r\n\r\ntrain.内容取得 = (文脈, 対象者, 実行者, 命令者) => {\r\n    const 内容 = new TrainStatus(対象者, 実行者, 命令者)\r\n\r\n    内容.命令者ソース.疲労 = 5\r\n    内容.命令者ソース.消耗 = 5\r\n    内容.命令者ソース.征服 = 200\r\n\r\n    内容.実行者ソース.疲労 = 85\r\n    内容.実行者ソース.消耗 = 50\r\n    内容.実行者ソース.性行動 = 400\r\n    内容.実行者ソース.征服 = 200\r\n    内容.実行者ソース.達成 = 300\r\n    内容.実行者ソース.奉仕 = 300\r\n    内容.実行者ソース.不潔 = 100\r\n    内容.実行者ソース.逸脱 = 100\r\n    内容.実行者ソース.性的 = 300\r\n    内容.実行者ソース.快Ｐ = 500\r\n\r\n    内容.対象者ソース.疲労 = 70\r\n    内容.対象者ソース.消耗 = 60\r\n    内容.対象者ソース.快Ｖ = 500\r\n    内容.接触追加(対象者, \"Ｖ\", 実行者, \"Ｐ\")\r\n    内容.対象者ソース.露出 = 50\r\n    内容.対象者ソース.逸脱 = 200\r\n    内容.対象者ソース.情愛 = 500\r\n    内容.対象者ソース.苦痛 = 500\r\n    内容.対象者ソース.受動 = 20\r\n    内容.対象者ソース.性的 = 300\r\n\r\n    return 内容\r\n}\r\n","/**\r\n * 奉仕エロＬＶ１\r\n */\r\nimport { TrainDef, Train, SourceTable, TrainStatus, 同性判定, getGaugeLevel, 調教行為実行判定 } from \"../train\";\r\nimport { 指使い } from '../traintraitcalc'\r\n\r\n\r\n\r\nconst train = new TrainDef()\r\nexport default train\r\n\r\ntrain.ID = 80\r\ntrain.名前 = \"手淫\"\r\ntrain.属性.add(\"エロ\", \"Ｐ\", \"愛撫\", \"前戯\")\r\n\r\ntrain.発動条件 = (ctx, target, player, commander) => {\r\n    return target.特性.Ｐ有り\r\n}\r\n\r\ntrain.許容判定 = (ctx, target, player, commander, array) => {\r\n    array.push([train.名前, -25])\r\n    調教行為実行判定(ctx, target, player, array)\r\n}\r\n\r\ntrain.内容取得 = (文脈, 対象, 実行者, 命令者) => {\r\n    const 内容 = new TrainStatus(対象, 実行者, 命令者)\r\n\r\n    内容.命令者ソース.疲労 = 5\r\n    内容.命令者ソース.消耗 = 5\r\n    内容.命令者ソース.征服 = 30\r\n\r\n    内容.実行者ソース.疲労 = 10\r\n    内容.実行者ソース.消耗 = 50\r\n    内容.実行者ソース.情愛 = 50\r\n    内容.実行者ソース.性行動 = 250\r\n    内容.実行者ソース.達成 = 50\r\n    内容.実行者ソース.屈従 = 350\r\n    内容.実行者ソース.奉仕 = 50\r\n    内容.実行者ソース.不潔 = 60\r\n    内容.実行者ソース.逸脱 = 100\r\n    内容.実行者ソース.性的 = 100\r\n\r\n    内容.対象者ソース.疲労 = 10\r\n    内容.対象者ソース.消耗 = 40\r\n    内容.対象者ソース.快Ｐ = 80 * 指使い(実行者)\r\n    内容.接触追加(対象, \"Ｐ\", 実行者, \"手\")\r\n    内容.対象者ソース.露出 = 40\r\n    内容.対象者ソース.逸脱 = 30\r\n    内容.対象者ソース.受動 = 30\r\n    内容.対象者ソース.性的 = 30\r\n\r\n    return 内容\r\n}\r\n","/**\r\n * 奉仕エロＬＶ１\r\n */\r\nimport { TrainDef, Train, SourceTable, TrainStatus, 同性判定, getGaugeLevel, 調教行為実行判定 } from \"../train\";\r\nimport { 舌使い } from '../traintraitcalc'\r\n\r\nconst train = new TrainDef()\r\nexport default train\r\n\r\ntrain.ID = 81\r\ntrain.名前 = \"フェラチオ\"\r\ntrain.属性.add(\"エロ\", \"Ｐ\", \"愛撫\", \"前戯\")\r\n\r\ntrain.発動条件 = (ctx, target, player, commander) => {\r\n    return target.特性.Ｐ有り\r\n}\r\n\r\ntrain.許容判定 = (ctx, target, player, commander, array) => {\r\n    array.push([train.名前, -25])\r\n    調教行為実行判定(ctx, target, player, array)\r\n}\r\n\r\ntrain.内容取得 = (文脈, 対象, 実行者, 命令者) => {\r\n    const 内容 = new TrainStatus(対象, 実行者, 命令者)\r\n\r\n    内容.命令者ソース.疲労 = 5\r\n    内容.命令者ソース.消耗 = 5\r\n    内容.命令者ソース.征服 = 30\r\n\r\n    内容.実行者ソース.疲労 = 10\r\n    内容.実行者ソース.消耗 = 50\r\n    内容.実行者ソース.情愛 = 100\r\n    内容.実行者ソース.性行動 = 300\r\n    内容.実行者ソース.達成 = 150\r\n    内容.実行者ソース.屈従 = 350\r\n    内容.実行者ソース.奉仕 = 100\r\n    内容.実行者ソース.不潔 = 60\r\n    内容.実行者ソース.逸脱 = 200\r\n    内容.実行者ソース.性的 = 200\r\n\r\n    内容.対象者ソース.疲労 = 10\r\n    内容.対象者ソース.消耗 = 40\r\n    内容.対象者ソース.快Ｐ = 120 * 舌使い(実行者)\r\n    内容.接触追加(対象, \"Ｐ\", 実行者, \"Ｍ\")\r\n    内容.対象者ソース.露出 = 100\r\n    内容.対象者ソース.逸脱 = 50\r\n    内容.対象者ソース.受動 = 50\r\n    内容.対象者ソース.性的 = 80\r\n\r\n    return 内容\r\n}\r\n","\r\nexport const trainList = [\r\n    import('./train_会話'),\r\n    import('./train_スキンシップ'),\r\n    import('./train_愛撫'),\r\n    import('./train_クンニ'),\r\n    import('./train_指挿れ'),\r\n    import('./train_胸揉み'),\r\n    import('./train_正常位'),\r\n    import('./train_手淫'),\r\n    import('./train_フェラチオ'),\r\n]\r\n","import { TrainDef } from \"./train\";\r\nimport { trainList } from \"./trainlist\";\r\n\r\nlet cache: TrainDef[] | undefined = undefined\r\n\r\nexport const getTrainList = async () => {\r\n    if (cache)\r\n        return cache\r\n    const ret: TrainDef[] = []\r\n    for (const k of trainList) {\r\n        ret.push((await k).default)\r\n    }\r\n    cache = ret\r\n    return ret\r\n}\r\n\r\n\r\n","import { TrainDef, Train, TrainStatus, 調教行為実行判定, SourceTable, KeyOfSourceTable, autoFixSources, sourceToGaugeChanges, KeyOfTrainGauge, gaugeToJuel, autoFixTrainSources } from \"./train\";\r\nimport { io } from \"../io\"\r\nimport { getTrainList } from \"./trainloader\";\r\nimport { GameScene, Game } from \"../game\";\r\nimport { serializer } from \"../savedata\";\r\nimport { viewGauge } from \"../characterstatus/view\";\r\nimport { GaugeTable } from \"../characterstatus/gauge\";\r\nimport { tuple, getString, getStringOrError, getOrDefault, constMap } from \"../util/tuple\";\r\nimport { CharacterReference } from \"../character\";\r\nimport { AsyncEvent } from \"../util/event\";\r\n\r\n// とりあえず1対1を実装\r\n\r\n\r\nexport class TrainScene implements GameScene {\r\n    targetIDs: string[]\r\n    playerIDs: string[]\r\n    commanderIDs: string[]\r\n    constructor(public game: Game, data: any) {\r\n        this.commanderIDs = getOrDefault<string[]>(data, \"commanderID\", [])\r\n        this.playerIDs = getOrDefault<string[]>(data, \"playerIDs\", [])\r\n        this.targetIDs = getOrDefault<string[]>(data, \"targetIDs\", [])\r\n        //if (!this.commanderIDs || this.commanderIDs.length === 0)\r\n            //throw new Error(\"commanderIDが指定されていない\")\r\n        if (!this.playerIDs || this.playerIDs.length === 0)\r\n            throw new Error(\"playerIDsが指定されていない\")\r\n        if (!this.targetIDs || this.targetIDs.length === 0)\r\n            throw new Error(\"targetIDsが指定されていない\")\r\n    }\r\n\r\n    async beginScene() {\r\n        if (this.playerIDs.length !== 1) throw new Error(\"playerは一人以外は未実装\")\r\n        if (this.targetIDs.length !== 1) throw new Error(\"targetは一人以外は未実装\")\r\n        const train = new Train()\r\n        let player = this.game.characters.tryGet(this.playerIDs[0])\r\n        let target = this.game.characters.tryGet(this.targetIDs[0])\r\n        if (!player || !target) {\r\n            let s = \"\"\r\n            if (!player) s += \" [game.playerCharacterID]\"\r\n            if (!target) s += \" [game.variables.調教対象]\"\r\n            s += \"が無効なので調教画面に入れません\"\r\n            await io.printError(s.trim())\r\n            this.game.setDefaultFlow()\r\n            return\r\n        }\r\n        train.targets.push(target)\r\n        train.players.push(player)\r\n        \r\n        const lst = await getTrainList()\r\n        while (true) {\r\n            const msg = this.checkTrainable(train)\r\n            if (msg) {\r\n                await io.drawLine()\r\n                await io.printl(`${msg}ので自動的に調教を終了します`)\r\n                await io.wait()\r\n                this.game.setDefaultFlow()\r\n                return\r\n            }\r\n\r\n            await io.drawLine()\r\n            await io.printl(`調教者: ${player.呼び名}`)\r\n            await this.viewGauge(player)\r\n            await io.printl(`調教対象: ${target.呼び名}`)\r\n            await this.viewGauge(target)\r\n\r\n            await io.drawLine()\r\n            for (const t of lst) {\r\n                await io.printc(`[${t.ID}] ${t.名前}する`)\r\n            }\r\n            for (const t of lst) {\r\n                await io.printc(`[${t.ID+500}] ${t.名前}させる`)\r\n            }\r\n            await io.ensureNewline()\r\n            await io.printl(\"[999] 終了\")\r\n            await io.drawLine()\r\n            const num = await io.inputNumber()\r\n            const isRev = num >= 500\r\n            const t = lst.find(x => isRev ? (x.ID === num-500) : (x.ID === num))\r\n            if (num === 999) {\r\n                await this.finishTrain()\r\n                return\r\n            }\r\n            else if (t) {\r\n                const trainPlayer = !isRev ? player : target\r\n                const trainTarget = !isRev ? target : player\r\n                const trainStatus = t.内容取得(train, trainTarget, trainPlayer, player)\r\n                const approval: [string, number][] = []\r\n                t.許容判定(train, trainTarget, trainPlayer, player, approval)\r\n                const fixedApproval = this.実行判定修整(approval)\r\n                await this.実行判定表示(fixedApproval)\r\n                await io.printw(`${t.名前}を実行`)\r\n                autoFixTrainSources(trainStatus)\r\n                //const playerSource = autoFixSources(trainStatus, trainStatus.実行者ソース, trainStatus.target, trainStatus.player)\r\n                //const targetSource = autoFixSources(trainStatus, trainStatus.対象者ソース, trainStatus.target, trainStatus.player)\r\n                await io.printl(\"-補正前\")\r\n                await this.内容表示(trainStatus)\r\n                await io.printl(\"-補正後\")\r\n                //await this.内容表示(src)\r\n                const gaugep = sourceToGaugeChanges(trainStatus.補正済み実行者ソース, trainStatus.player)\r\n                await io.printl(`調教者: ${trainPlayer.呼び名}`)\r\n                await this.変動表示(gaugep, true)\r\n                const gauget = sourceToGaugeChanges(trainStatus.補正済み対象者ソース, trainStatus.target)\r\n                await io.printl(`調教対象: ${trainTarget.呼び名}`)\r\n                await this.変動表示(gauget, true)\r\n\r\n                this.変動加算(trainPlayer.変動, gaugep)\r\n                this.変動加算(trainTarget.変動, gauget)\r\n                await io.wait()\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    async finishTrain() {\r\n        const juels = this.珠取得()\r\n        console.log(juels)\r\n        if (Game.isSceneRegistered(\"levelup\")) {\r\n            this.game.setFlow(\"levelup\", { targetID: this.targetIDs[0] })\r\n        }\r\n        else {\r\n            this.game.setFlow(\"main\", {})\r\n        }\r\n    }\r\n\r\n    async viewGauge(c: CharacterReference) {\r\n        await viewGauge(c)\r\n        const keys = tuple(\r\n            \"快Ｃ\",\r\n            \"快Ｐ\",\r\n            \"快Ｖ\",\r\n            \"快Ａ\",\r\n            \"快Ｂ\",\r\n            \"快Ｍ\",\r\n            \"潤滑\",\r\n            \"恭順\",\r\n            \"欲情\",\r\n            \"屈服\",\r\n            \"習得\",\r\n            \"恥情\",\r\n            \"苦痛\",\r\n            \"恐怖\",\r\n            \"憤慨\",\r\n            \"不快\",\r\n            \"抑鬱\",\r\n        )\r\n        for (const k of keys) {\r\n            const v = Math.floor(c.変動[k].value)\r\n            await io.printc(`${k}:${v}`)\r\n        }\r\n        await io.printl()\r\n    }\r\n\r\n    checkTrainable(train: Train) {\r\n        if (train.players.length === 0 || train.targets.length === 0) {\r\n            let s = \"\"\r\n            if (train.players.length === 0) s += \" 調教者\"\r\n            if (train.targets.length === 0) s += \" 調教対象\"\r\n            s += \"が誰もいなくなった\"\r\n            return s\r\n        }\r\n        if (!train.players.find(x => x.変動.体力.value > 0)) {\r\n            const 全員 = train.players.length > 1 ? \"全員\" : \"\"\r\n            return `調教者${全員}の体力がなくなった`\r\n        }\r\n        if (!train.players.find(x => x.変動.気力.value > 0)) {\r\n            const 全員 = train.players.length > 1 ? \"全員\" : \"\"\r\n            return `調教者${全員}の気力がなくなった`\r\n        }\r\n        if (!train.targets.find(x => x.変動.体力.value > 0)) {\r\n            const 全員 = train.targets.length > 1 ? \"全員\" : \"\"\r\n            return `調教対象${全員}の体力がなくなった`\r\n        }\r\n        if (!train.targets.find(x => x.変動.気力.value > 0)) {\r\n            const 全員 = train.targets.length > 1 ? \"全員\" : \"\"\r\n            return `調教対象${全員}の気力がなくなった`\r\n        }\r\n        return undefined\r\n    }\r\n\r\n    実行判定修整(array: [string, number][]) {\r\n        return array\r\n    }\r\n\r\n    async 実行判定表示(array: [string, number][]) {\r\n        //const signTbl = [\"－\", \"±\", \"＋\"]\r\n        for (const [name, value] of array) {\r\n            if (Math.abs(value) !== 0) {\r\n                //const sign = signTbl[Math.sign(value) + 1]\r\n                await io.prints(`${name}(${value})`)\r\n            }\r\n        }\r\n        await io.printl()\r\n    }\r\n    async 内容表示(trainData: TrainStatus) {\r\n        let str = \"\"\r\n        for (const key of KeyOfSourceTable) {\r\n            const val = trainData.実行者ソース[key]\r\n            if (val === 0) continue\r\n            str += `${key}(${val}) `\r\n        }\r\n        str = str.trim()\r\n        await io.printl(`${trainData.player.呼び名}`)\r\n        await io.prints(`　`)\r\n        await io.printl(`${str}`)\r\n\r\n        str = \"\"\r\n        for (const key of KeyOfSourceTable) {\r\n            const val = trainData.対象者ソース[key]\r\n            if (val === 0) continue\r\n            str += `${key}(${val}) `\r\n        }\r\n        str = str.trim()\r\n        await io.printl(`${trainData.target.呼び名}`)\r\n        await io.prints(`　`)\r\n        await io.printl(`${str}`)\r\n    }\r\n\r\n    static readonly gaugeNames = tuple(\r\n        \"体力\",\r\n        \"気力\",\r\n        \"酩酊\",\r\n        \"快Ｃ\",\r\n        \"快Ｐ\",\r\n        \"快Ｖ\",\r\n        \"快Ａ\",\r\n        \"快Ｂ\",\r\n        \"快Ｍ\",\r\n        \"潤滑\",\r\n        \"恭順\",\r\n        \"欲情\",\r\n        \"屈服\",\r\n        \"習得\",\r\n        \"恥情\",\r\n        \"苦痛\",\r\n        \"恐怖\",\r\n        \"憤慨\",\r\n        \"不快\",\r\n        \"抑鬱\",\r\n    )\r\n    async 変動表示(gauge: GaugeTable, isAdditive: boolean) {\r\n        let s = \"\"\r\n        for (const key of TrainScene.gaugeNames) {\r\n            const val = gauge[key]\r\n            if (val.value === 0) continue\r\n            s += `${key}${this.toSignedString(Math.floor(val.value))} `\r\n        }\r\n        await io.printl(\"　\"+s.trim())\r\n    }\r\n    toSignedString(n: number) {\r\n        const arr = [\"-\", \"±\", \"+\"]\r\n        return arr[Math.sign(n) + 1]+Math.abs(n)\r\n    }\r\n\r\n    変動加算(gauge: GaugeTable, add: GaugeTable) {\r\n        for (const key of TrainScene.gaugeNames) {\r\n            gauge[key].value += add[key].value\r\n        }\r\n    }\r\n\r\n    珠取得() {\r\n        const ret: [CharacterReference, [string, number][]][] = []\r\n        const cs = [...this.playerIDs, ...this.targetIDs, ...this.commanderIDs].map(x => this.game.characters.get(x))\r\n        for (const c of cs) {\r\n            const arr: [string,number][] = []\r\n            ret.push([c, arr])\r\n            for (const k of TrainScene.gaugeNames) {\r\n                if (k === \"体力\") continue\r\n                if (k === \"気力\") continue\r\n                if (k === \"酩酊\") continue\r\n                const j = gaugeToJuel(c.変動[k].value)\r\n                if (j === 0) continue\r\n                arr.push([k, j])\r\n                c.スコア[k].value += j\r\n                c.変動[k].value = 0\r\n            }\r\n        }\r\n        return ret\r\n    }\r\n\r\n}\r\n\r\nexport const initializeModule = new AsyncEvent()\r\ninitializeModule.addListener(async () => {\r\n    Game.registerSceneClass(\"train\", TrainScene)\r\n})\r\n","\r\nimport { GameScene, Game } from \"../game\";\r\nimport { makeModuleInitializer } from \"../util/moduleInitializer\";\r\nimport { io } from \"../io\";\r\nimport { getString, getStringOrError } from \"../util/tuple\";\r\nimport { AsyncEvent } from \"../util/event\";\r\n\r\nexport const initializeModule = new AsyncEvent()\r\n\r\nexport class LevelUpScene implements GameScene {\r\n    targetID: string\r\n    constructor(public game: Game, data: any) {\r\n        const targetID = getStringOrError(data, \"targetID\", \"レベルアップ対象がいないので戻ります\");\r\n        this.targetID = targetID\r\n    }\r\n    async beginScene() {\r\n        await io.printl(\"levelup\")\r\n        await io.wait()\r\n    }\r\n}\r\ninitializeModule.addListener(async () => {\r\n    Game.registerSceneClass(\"levelup\", LevelUpScene)\r\n})\r\n\r\n","\r\nimport \"./trainloader\"\r\nimport \"./trainmode\"\r\nimport { AsyncEvent } from \"../util/event\";\r\nimport { makeModuleInitializer } from \"../util/moduleInitializer\";\r\n\r\nexport const initializeModule = makeModuleInitializer(\r\n    import('./levelupmode'),\r\n    import('./train'),\r\n    import('./trainmode'),\r\n)\r\n\r\n\r\n","import { CharacterDef } from '../../charadef'\r\nimport '../../characterstatus'\r\nimport '../../train'\r\n\r\nexport default () => {\r\n    const キャラ = new CharacterDef()\r\n\r\n    キャラ.番号 = 0\r\n    キャラ.名前 = \"あなた\"\r\n    キャラ.呼び名 = \"あなた\"\r\n    キャラ.変動.体力.max = 2000\r\n    キャラ.変動.気力.max = 2000\r\n    キャラ.変動.勃起.max = 1000\r\n    キャラ.変動.精力.max = 1000\r\n\r\n    キャラ.特性.Ｐ有り = true\r\n    キャラ.特性.Ｖ有り = false\r\n    キャラ.特性.Ｂ有り = false\r\n\r\n    return キャラ\r\n}\r\n\r\n\r\n","import { CharacterDef } from '../../charadef'\r\nimport '../../characterstatus'\r\nimport '../../train'\r\n\r\nexport default () => {\r\n    const キャラ = new CharacterDef()\r\n\r\n    キャラ.番号 = 1\r\n    キャラ.名前 = \"博麗 霊夢\"\r\n    キャラ.呼び名 = \"霊夢\"\r\n    キャラ.変動.体力.max = 1500\r\n    キャラ.変動.気力.max = 1500\r\n    キャラ.変動.勃起.max = 1000\r\n    キャラ.変動.精力.max = 1000\r\n    キャラ.レベル.レズっ気 = 1\r\n\r\n    キャラ.特性.処女 = true\r\n\r\n    return キャラ\r\n}\r\n\r\n","/**\r\n * キャラ定義のリスト\r\n * \r\n * キャラが増えたらここに追加してください。\r\n */\r\nexport const characterDefList = [\r\n    import('./chara0'),\r\n    import('./chara1'),\r\n]\r\n","import { CharacterDef } from '.'\r\nimport { characterDefList } from './charalist'\r\n\r\nlet cache: CharacterDef[] | undefined = undefined\r\n\r\n/**\r\n * chara/charalistに記述されたキャラ定義を返す\r\n */\r\nexport const getCharacterDefList = async (): Promise<CharacterDef[]> => {\r\n    if (cache)\r\n        return cache\r\n    const ret: CharacterDef[] = []\r\n    for (const modulePromise of characterDefList) {\r\n        const f = (await modulePromise).default\r\n        ret.push(f())\r\n    }\r\n    cache = ret\r\n    return ret\r\n}\r\n\r\n\r\n","import { savedata, saveclass, serializer } from './savedata'\r\nimport { uniqueId } from './util'\r\nimport { CharacterDef } from './charadef'\r\nimport { getCharacterDefList } from './charadef/charaloader'\r\n\r\n@saveclass(\"charactercontainer\")\r\nexport class CharactersContainer {\r\n    static prepareFunctions: ((c: CharacterReference, cd?: CharacterDef) => void)[] = []\r\n\r\n    @savedata idOrder: string[] = []\r\n    @savedata characters = new Map<string, CharacterReference>()\r\n\r\n    get(id: string) {\r\n        const c = this.characters.get(id)\r\n        if (!c) throw new Error(`存在しないキャラID '${id}'`)\r\n        return c\r\n    }\r\n    tryGet(id: string) {\r\n        const c = this.characters.get(id)\r\n        return c\r\n    }\r\n\r\n    async createCharacter(source?: CharacterDef | number): Promise<CharacterReference> {\r\n        const def = await this.resolveCharaDef(source)\r\n        const idhead = def ? def.名前 : \"\"\r\n        const c = new CharacterReference()\r\n        c.ID = this.getUnusedID(idhead)\r\n        for (const f of CharactersContainer.prepareFunctions) {\r\n            f(c, def)\r\n        }\r\n        this.characters.set(c.ID, c)\r\n        this.idOrder.push(c.ID)\r\n        return c\r\n    }\r\n\r\n    async resolveCharaDef(src: CharacterDef | number | undefined) {\r\n        if (src === undefined) {\r\n            return src\r\n        }\r\n        else if (typeof (src) === 'number') {\r\n            const charas = await getCharacterDefList()\r\n            const ret = charas.find(x => x.番号 === src)\r\n            if (ret === undefined)\r\n                throw new Error(`CharacterDefが見つからない: ${src}`)\r\n            return ret\r\n        }\r\n        else {\r\n            return src\r\n        }\r\n    }\r\n\r\n    getUnusedID(name: string): string {\r\n        let loops = 0\r\n        while (true) {\r\n            const id = name+uniqueId()\r\n            loops += 1\r\n            if (loops > 100000)\r\n                throw new Error(\"much loops\")\r\n            if (this.characters.has(id))\r\n                continue\r\n            return id\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\nCharactersContainer.prepareFunctions.push((c, d) => {\r\n    if (d) {\r\n        c.番号 = d.番号\r\n        c.名前 = d.名前\r\n        c.呼び名 = d.呼び名\r\n    }\r\n})\r\n\r\n\r\n@saveclass(\"unidirectionalrelationship\")\r\nexport class UnidirectionalRelationship {\r\n    @savedata 相性 = 0\r\n    @savedata 好感度 = 0\r\n    @savedata 恋慕 = false\r\n    @savedata 親愛 = false\r\n    @savedata 淫乱 = false\r\n    @savedata 娼婦 = false\r\n    @savedata 服従 = false\r\n    @savedata 隷属 = false\r\n\r\n    static initializers: ((o: UnidirectionalRelationship) => void)[] = []\r\n    constructor() {\r\n        for (const f of UnidirectionalRelationship.initializers) {\r\n            f(this)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@saveclass(\"characterreference\")\r\nexport class CharacterReference {\r\n    @savedata ID = \"＜ID＞\"\r\n    @savedata 番号 = -1\r\n    @savedata 名前 = \"＜名前＞\"\r\n    @savedata 呼び名 = \"＜呼び名＞\"\r\n    @savedata 関係 = new Map<string, UnidirectionalRelationship>()\r\n\r\n    関係取得(c: CharacterReference): UnidirectionalRelationship | undefined\r\n    関係取得(c: CharacterReference, createIfNothing: boolean): UnidirectionalRelationship\r\n    関係取得(c: CharacterReference, createIfNothing = false) {\r\n        if (!c || !c.ID)\r\n            throw new Error(`invalid character: ${(c || {}).ID}`)\r\n        const r = this.関係.get(c.ID)\r\n        if (!r && createIfNothing) {\r\n            const v = new UnidirectionalRelationship()\r\n            this.関係.set(c.ID, v)\r\n            return v\r\n        }\r\n        return r\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n","import { savedata, saveclass, serializer } from './savedata'\r\nconsole.log(\"variables\")\r\n\r\n/**\r\n * グローバル変数みたいなテーブル\r\n * \r\n * \r\n */\r\n@saveclass(\"variable\")\r\nexport class Variables {\r\n    @savedata 日付 = new Date()\r\n    @savedata 所持金 = 0\r\n    @savedata 選択中のキャラID: string[] = []\r\n}\r\n\r\n@saveclass(\"date\")\r\nexport class Date {\r\n    @savedata 年 = 1\r\n    @savedata 月 = 1\r\n    @savedata 日 = 1\r\n    @savedata 時 = 0\r\n    @savedata 分 = 0\r\n    @savedata 秒 = 0\r\n    @savedata ミリ秒 = 0\r\n}\r\n\r\n","/**\r\n * このモジュールはいわばほかのすべてのモジュールのまとめ役で、C#で言えば外部DLLをリフレクションで呼び出しまくる場所。\r\n * \r\n * ほかのモジュールの関数を、型定義上は依存せずにエラー無く呼び出すことがお仕事\r\n */\r\n\r\nimport { io } from \"./io\"\r\nimport { CharactersContainer } from './character'\r\nimport { Variables } from './variables'\r\nimport { saveclass, savedata, serializer } from './savedata'\r\n\r\n\r\n\r\nexport interface GameScene {\r\n    beginScene(): Promise<void>\r\n}\r\nexport interface GameSceneConstructor {\r\n    new(game: Game, data: any): GameScene\r\n}\r\nexport const isGameScene = (o: any): o is GameScene => {\r\n    if (o && o.beginScene && typeof (o.beginScene) === 'function')\r\n        return true\r\n    else\r\n        return false\r\n}\r\n\r\n\r\n\r\n/**\r\n * シーン制御兼根源オブジェクト\r\n */\r\n@saveclass(\"game\")\r\nexport class Game {\r\n    static serializer = serializer\r\n\r\n    @savedata characters = new CharactersContainer()\r\n    @savedata currentFlow = \"title\"\r\n    @savedata currentFlowData: any = null\r\n    @savedata variables = new Variables()\r\n    @savedata playerCharacterID = \"\"\r\n\r\n    static readonly prepareFunctions: ((c: Game) => void)[] = []\r\n    static defaultScene = \"main\"\r\n\r\n    private static sceneMap: { [k: string]: GameSceneConstructor } = {}\r\n\r\n\r\n    setFlow(name: string, data: any) {\r\n        this.currentFlow = name\r\n        this.currentFlowData = JSON.parse(JSON.stringify(data))\r\n    }\r\n    setDefaultFlow() {\r\n        this.setFlow(Game.defaultScene, {})\r\n    }\r\n\r\n    serialize() {\r\n        return serializer.serialize(this)\r\n    }\r\n    serializeObj() {\r\n        return serializer.convertToSerializableData(this)\r\n    }\r\n\r\n\r\n    static registerSceneClass(name: string, sceneClass: GameSceneConstructor) {\r\n        if (Game.sceneMap[name])\r\n            throw new Error(\"overlapped scene: \" + name)\r\n        Game.sceneMap[name] = sceneClass\r\n    }\r\n\r\n    static isSceneRegistered(name: string) {\r\n        return Game.sceneMap[name] ? true : false\r\n    }\r\n\r\n    static async run(game: Game) {\r\n        while (true) {\r\n            const f = Game.sceneMap[game.currentFlow]\r\n            if (!f) {\r\n                await io.printError(`エラー！ currentFlowが不正な値になっている: ${game.currentFlow}`)\r\n                await io.wait()\r\n                game.currentFlow = Game.defaultScene\r\n                await io.printError(`シーン'${Game.defaultScene}'に戻ります`)\r\n                await io.wait()\r\n                continue;\r\n            }\r\n            //try {\r\n                const scene = new f(game, game.currentFlowData)\r\n            await scene.beginScene()\r\n            await io.waitTime(1)\r\n            //}\r\n            //catch (e) {\r\n                //await io.printError(\"\" + e)\r\n                //game.setDefaultFlow()\r\n            //}\r\n        }\r\n    }\r\n\r\n}\r\n\r\n","\r\n\r\nexport const title = \"EraJS test版\"\r\nexport const version = \"0.0.1\"\r\n\r\nwindow.document.title = title\r\n\r\n","import { io } from \"./io\";\r\nimport { Game, isGameScene, GameScene } from \"./game\";\r\nimport { viewGauge, viewStatus } from \"./characterstatus/view\";\r\nimport { clamp } from \"./util/clamp\";\r\nimport { Gauge } from \"./characterstatus/gauge\";\r\nimport * as project from './project'\r\nimport { getCharacterDefList } from \"./charadef/charaloader\";\r\nimport { AsyncEvent } from \"./util/event\";\r\n\r\n\r\n\r\nclass Title implements GameScene {\r\n    constructor(public game: Game, data: any) {\r\n    }\r\n\r\n    async beginScene() {\r\n        await io.align('center')\r\n        await io.drawLine()\r\n        await io.printl(`EraJS v.${project.version}`)\r\n        await io.printl(\"このゲームは18歳未満はプレイ禁止です。\")\r\n        await io.drawLine()\r\n        await io.printl(\"[0] はじめから\")\r\n        await io.printl(\"[1] つづきから\")\r\n        await io.align('left')\r\n        const ask = await io.inputNumber()\r\n        if (ask === 0) {\r\n            const charas = await getCharacterDefList()\r\n            console.log(charas)\r\n            const c1 = await this.game.characters.createCharacter(0)\r\n            this.game.playerCharacterID = c1.ID\r\n            const c2 = await this.game.characters.createCharacter(1)\r\n            this.game.variables.選択中のキャラID = [c2.ID]\r\n            this.game.setFlow(\"main\", {})\r\n        }\r\n        else {\r\n            await io.printw(\"ロードは未実装\")\r\n        }\r\n    }\r\n}\r\nGame.registerSceneClass(\"title\", Title)\r\n\r\n\r\n\r\nclass Main implements GameScene {\r\n    constructor(public game: Game, data: any) {\r\n    }\r\n\r\n    async beginScene() {\r\n        await io.drawLine()\r\n        const p = this.game.characters.get(this.game.playerCharacterID)\r\n        const v = this.game.variables\r\n        await io.printl(`日付：${v.日付.日}日目　所持金：${v.所持金}`)\r\n        await io.printl(`${p.呼び名}`)\r\n        await viewGauge(p)\r\n        const targetChara = this.game.characters.tryGet(this.game.variables.選択中のキャラID[0] || \"\")\r\n        if (targetChara) {\r\n            await io.printl(`調教対象: ${targetChara.呼び名}`)\r\n            await viewGauge(targetChara)\r\n        }\r\n        else {\r\n            await io.printl(`調教対象: なし`)\r\n        }\r\n        await io.drawLine()\r\n\r\n        const f = await io.branch([\r\n            [\"調教開始\", () => this.game.setFlow(\"train\", {\r\n                playerIDs: [this.game.playerCharacterID],\r\n                targetIDs: this.game.variables.選択中のキャラID\r\n            })],\r\n            [\"休憩\", () => this.rest(this.game)],\r\n            [\"能力表示\", () => this.status(this.game)],\r\n            [\"対象選択\", () => this.selectTarget(this.game)],\r\n            [\"アイテムショップ\", undefined],\r\n            [\"データセーブ\", undefined],\r\n            [\"データロード\", undefined],\r\n            [\"設定\", undefined],\r\n        ])\r\n        if (f) {\r\n            await f()\r\n        }\r\n    }\r\n\r\n    async selectCharacter(game: Game, {\r\n        allowBack = true,\r\n    } = {}) {\r\n        while (true) {\r\n            await io.drawLine()\r\n            await io.printl(\"対象を選んでください\")\r\n            const arr = io.branchBlank<string>()\r\n            await io.drawLine()\r\n            for (const c of game.characters.idOrder) {\r\n                const chara = game.characters.get(c)\r\n                await io.printButton(`${chara.呼び名}`, chara.ID)\r\n                await io.newline()\r\n            }\r\n            await io.drawLine()\r\n            if (allowBack)\r\n                await io.printButton(`戻る`, \"\")\r\n            await io.newline()\r\n            const id = await io.inputString()\r\n            const c = game.characters.tryGet(id)\r\n            if (c) {\r\n                return c\r\n            }\r\n            else {\r\n                if (allowBack)\r\n                    return\r\n            }\r\n        }\r\n    }\r\n\r\n    async selectTarget(game: Game) {\r\n        const chara = await this.selectCharacter(game)\r\n        if (chara) {\r\n            game.variables.選択中のキャラID = [chara.ID]\r\n        }\r\n    }\r\n\r\n    async status(game: Game) {\r\n        const chara = await this.selectCharacter(game)\r\n        if (chara) {\r\n            await viewStatus(chara)\r\n            await io.wait()\r\n        }\r\n    }\r\n\r\n    async rest(game: Game) {\r\n        const change = (g: Gauge, f: (v: number) => number) => {\r\n            const newval = f(g.value)\r\n            g.value = clamp(newval, g.min, g.max)\r\n        }\r\n        for (const id of game.characters.idOrder) {\r\n            const c = game.characters.get(id)\r\n            change(c.変動.体力, v => v + 1000)\r\n            change(c.変動.気力, v => v + 10000000)\r\n        }\r\n        game.variables.日付.日 += 1\r\n        await io.drawLine()\r\n        await io.printw(\"休憩しました\")\r\n    }\r\n}\r\n\r\nexport const initializeModule = new AsyncEvent()\r\ninitializeModule.addListener(async () => {\r\n    Game.registerSceneClass(\"main\", Main)\r\n})\r\n\r\n","import { Game } from './game'\r\nimport { serializer, SaveManager } from './savedata';\r\nimport { makeModuleInitializer } from './util/moduleInitializer';\r\nimport './io'\r\nimport './train'\r\nimport './charadef'\r\nimport './characterstatus'\r\nimport './mainscene'\r\nimport { GaugeTable } from './characterstatus/gauge';\r\n\r\n\r\n\r\ndeclare global {\r\n    interface Window {\r\n        game: Game\r\n        serializer: SaveManager\r\n    }\r\n}\r\n\r\nconst initializeModule = makeModuleInitializer(\r\n    import('./io'),\r\n    import('./train'),\r\n    import('./mainscene'),\r\n    import('./characterstatus'),\r\n)\r\n\r\nconst runLoader = async () => {\r\n    await initializeModule.invoke()\r\n    //await OnModulesPrepare.invoke()\r\n    window.serializer = serializer\r\n    window.game = new Game()\r\n    const global: any = window\r\n    global.GaugeTable = GaugeTable\r\n    await Game.run(window.game)\r\n}\r\n\r\nwindow.addEventListener(\"load\", runLoader)\r\n"]}